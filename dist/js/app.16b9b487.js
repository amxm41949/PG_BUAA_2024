(function(){"use strict";var e={46:function(e,t,n){var a=n(5688),l=n(6768);const o={id:"app"};function s(e,t,n,a,s,i){const r=(0,l.g2)("router-view");return(0,l.uX)(),(0,l.CE)("div",o,[(0,l.bF)(r)])}var i={name:"App"},r=n(1241);const c=(0,r.A)(i,[["render",s]]);var p=c,d=n(1457),m=(n(4188),n(1387));const u=e=>((0,l.Qi)("data-v-2c6d5c8a"),e=e(),(0,l.jt)(),e),h={class:"common-layout"},g=u((()=>(0,l.Lk)("div",{class:"header-content"},[(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L0(系统总体结构)")],-1))),k={class:"content-wrapper"},f={class:"image-container"},b=["src"],v={name:"image-map",id:"image-map"},L=["shape","coords","href","onClick","onMouseover","onMouseout"],y={class:"steps-button-container"},x=(0,l.eW)(" Next step "),F={class:"markdown-container"},C=["innerHTML"],_={key:0,class:"rounded-box"},T=u((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),M=[T];function S(e,t,n,o,s,i){const r=(0,l.g2)("el-header"),c=(0,l.g2)("el-step"),p=(0,l.g2)("el-steps"),d=(0,l.g2)("el-button"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",h,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(r,{style:{"align-content":"center"}},{default:(0,l.k6)((()=>[g])),_:1}),(0,l.bF)(m,{style:{padding:"10px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",k,[(0,l.Lk)("div",f,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,b),(0,l.Lk)("map",v,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,L)))),128))]),(0,l.Lk)("div",y,[(0,l.bF)(p,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(c,{title:"Step 1"}),(0,l.bF)(c,{title:"Step 2"}),(0,l.bF)(c,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(d,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[x])),_:1},8,["onClick"])])]),(0,l.Lk)("div",F,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,C)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",_,M)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}n(4114);var w=n(6587),A=n.n(w),E=(n(765),n(642)),H={data(){return{active:0,imageSrc:"/pictures/level0/L0.png",hotspots:[{id:"4",shape:"poly",coords:"74,455,382,455,398,451,401,441,406,439,406,427,408,413,408,298,403,288,398,282,393,277,384,275,75,274,65,275,56,279,51,285,47,292,46,429,49,439,58,449,66,454",href:"/l1m1"},{id:"1",shape:"poly",coords:"75,844,383,844,399,840,402,830,407,828,407,816,409,802,409,687,404,677,399,671,394,666,385,664,76,663,66,664,57,668,52,674,48,681,47,818,50,828,59,838,67,843",href:"/l1m2"},{id:"2",shape:"poly",coords:"74,1230,382,1230,398,1226,401,1216,406,1214,406,1202,408,1188,408,1073,403,1063,398,1057,393,1052,384,1050,75,1049,65,1050,56,1054,51,1060,47,1067,46,1204,49,1214,58,1224,66,1229",href:"/l1m3"},{id:"3",shape:"poly",coords:"948,841,1256,841,1272,837,1275,827,1280,825,1280,813,1282,799,1282,684,1277,674,1272,668,1267,663,1258,661,949,660,939,661,930,665,925,671,921,678,920,815,923,825,932,835,940,840",href:"/l1m4"}],markdownText:"**流程图**\n  \n  ![img](https://s21.ax1x.com/2024/12/06/pA79Al6.png)\n  \n  **总览**\n  \n  > PostgreSQL 数据库是一种几乎可以运行在各种平台上的免费开源对象关系数据库，它是一种以关系型数据库和 SQL 为基础，扩展了抽象数据类型，从而具备面向对象特性的数据库。PostgreSQL 数据库主要由连接模块、查询模块、存储模块、事务模块四部分组成。\n  \n  **模块信息**\n  \n  - 连接模块\n      \n      > 接受外部操作对系统的请求，对操作请求进行预处理和分发，起系统逻辑控制作用。\n  \n  - 查询模块\n  \n      > 完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作。\n  \n  - 事务模块：\n  \n      > 负责存储和管理物理数据，提供对编译查询系统的支持。\n  \n  - 存储模块：\n  \n      > 完成对操作请求处理的事务一致性支持，提供对并发访问数据的一致性支持。\n  \n  **数据流信息**\n  \n  - 日志\n  \n      > 写日志信息，日志恢复请求，如ereport。\n  \n  - 锁请求\n  \n      > 获取、释放锁请求。\n  \n  - 事务指令\n  \n      > 调用事务模块相关处理函数，如BeginTransactionBlock、RequireTransactionBlock、RollbackToSavepoint等。\n  \n  - 内存指令\n      \n      > 调用的内存模块相关处理函数，如AlterTable、DefineIndex、RemoveRelations等。\n              ",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})}};const P=(0,r.A)(H,[["render",S],["__scopeId","data-v-2c6d5c8a"]]);var X=P,I=n(5187);function N(e,t,n,a,o,s){return(0,l.uX)(),(0,l.CE)("div",null,[(0,l.Lk)("h1",null,"下一层数据流图：节点 "+(0,I.v_)(e.$route.params.id),1),(0,l.Lk)("p",null,"这里是节点 "+(0,I.v_)(e.$route.params.id)+" 的详细信息。",1)])}var R={name:"NextLevelPage"};const $=(0,r.A)(R,[["render",N]]);var O=$;const D=e=>((0,l.Qi)("data-v-3a4e4249"),e=e(),(0,l.jt)(),e),B={class:"common-layout"},W=D((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Q={class:"header-content"},j=(0,l.eW)("Back"),z=D((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M1",-1))),U=D((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),V={class:"image-container"},q=["src"],K=D((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),G=(0,l.eW)("Next step"),J=["innerHTML"],Y={key:0,class:"rounded-box"},Z=D((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ee=[Z];function te(e,t,n,a,o,s){const i=(0,l.g2)("el-button"),r=(0,l.g2)("el-header"),c=(0,l.g2)("el-step"),p=(0,l.g2)("el-steps"),d=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",B,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(r,null,{default:(0,l.k6)((()=>[W,(0,l.Lk)("div",Q,[(0,l.bF)(i,{type:"info",onClick:s.goBack,class:"back-button"},{default:(0,l.k6)((()=>[j])),_:1},8,["onClick"]),z]),U])),_:1}),(0,l.bF)(d,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",V,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:o.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,q)]),K,(0,l.bF)(p,{style:{"max-width":"600px"},active:o.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(c,{title:"Step 1"}),(0,l.bF)(c,{title:"Step 2"}),(0,l.bF)(c,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(i,{class:"next-button",style:{"margin-top":"12px"},onClick:s.next},{default:(0,l.k6)((()=>[G])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:s.compiledMarkdown,class:"markdown-body"},null,8,J),o.active>=1?((0,l.uX)(),(0,l.CE)("div",Y,ee)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ne={data(){return{active:0,imageSrc:"/pictures/level1/L1M1.png",markdownText:"**总览**\n\n>接受外部操作对系统的请求，对操作请求进行预处理和分发，起系统逻辑控制作用。\n\n**模块信息**\n\n- 守护进程postmaster\n    > 多用户模式下一个数据库实例由守护进程 Postmaster 来管理。它是一个运行在服务器上的总控进程，负责整个系统的启动和关闭，并且在服务进程出现错误时完成系统的恢复。它会为客户端连接请求 fork 一个 Postgres 服务进程，来代表客户端在数据库上执行各种命令。\n\n- 服务进程postgres\n    > Postgres进程是实际的接受查询请求并调用相应模块处理查询的服务进程。它直接接受用户的命令进行编译执行，并将结果返回给用户。如此循环，直到用户断开连接。\n\n- ReadCommand\n    ```C++\n    /* ----------------\n     *                ReadCommand 从前端或标准输入读取命令，如果文件结束，\n     *                将其放入 inBuf，并返回信息类型代码（信息的第一个字节）。\n     *                则返回 EOF。\n     * ----------------\n     */\n    static int\n    ReadCommand(StringInfo inBuf)\n    {\n            int                        result;\n\n            if (whereToSendOutput == DestRemote)\n                    result = SocketBackend(inBuf);\n            else\n                    result = InteractiveBackend(inBuf);\n            return result;\n    }\n    ```\n\n**数据流信息**\n\n- 用户命令\n    > 用户命令分为两种：一种是查询命令，即插人、删除、更新和选择四种命令。另一种是非查询命令，如创建/删除表、视图、索引等命令。\n            ",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ae=(0,r.A)(ne,[["render",te],["__scopeId","data-v-3a4e4249"]]);var le=ae;const oe={class:"common-layout"},se={class:"header-content"},ie=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L1")],-1),re=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}}," 现在位于    第 1 层",-1),ce=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),pe=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),de={class:"content-wrapper"},me={class:"image-container"},ue=["src"],he={name:"image-map",id:"image-map"},ge=["shape","coords","href","onClick","onMouseover","onMouseout"],ke={class:"steps-button-container"},fe=(0,l.eW)(" Next step "),be={class:"markdown-container"},ve=["innerHTML"],Le={key:0,class:"rounded-box"},ye=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),xe=[ye];function Fe(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",oe,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",se,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[ie])),default:(0,l.k6)((()=>[re])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[ce])),default:(0,l.k6)((()=>[pe])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",de,[(0,l.Lk)("div",me,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,ue),(0,l.Lk)("map",he,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ge)))),128))]),(0,l.Lk)("div",ke,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[fe])),_:1},8,["onClick"])])]),(0,l.Lk)("div",be,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,ve)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Le,xe)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ce={data(){return{activeName:"second",active:0,imageSrc:"/pictures/level1/L1M2.png",hotspots:[{id:"1",shape:"poly",coords:"356,335,357,413,359,422,362,423,365,427,371,429,549,429,555,428,561,425,564,417,566,415,567,338,565,332,561,326,556,325,371,322,363,328,359,327",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"355,559,356,637,358,646,361,647,364,651,370,653,548,653,554,652,560,649,563,641,565,639,566,562,564,556,560,550,555,549,370,546,362,552,358,551",href:"/l2m2m4"},{id:"3",shape:"poly",coords:"882,429,1117,429,1125,427,1131,420,1131,415,1133,408,1133,336,1129,326,1122,322,881,322,872,326,869,333,866,348,868,413,872,422,876,425",href:"/l2m2m2"},{id:"4",shape:"poly",coords:"881,653,1116,653,1124,651,1130,644,1130,639,1132,632,1132,560,1128,550,1121,546,880,546,871,550,868,557,865,572,867,637,871,646,875,649",href:"/l2m2m3"},{id:"5",shape:"poly",coords:"0,796,1,874,3,883,6,884,9,888,15,890,193,890,199,889,205,886,208,878,210,876,211,799,209,793,205,787,200,786,15,783,7,789,3,788",href:"/l1m3"},{id:"6",shape:"poly",coords:"367,105,555,105,561,102,565,97,567,90,567,14,564,7,556,2,552,1,367,1,362,4,359,11,355,13,355,92,358,99,363,103",href:"/l1m1"}],markdownText:"**总览**\n\n> 完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作。\n\n**模块信息**\n\n- 查询分析模块\n    \n    > 进行词法分析、语法分析和语义分析生成查询树，并且判断sql语句类型。 \n\n- 查询重写模块\n    \n    > 根据已定义的规则对查询树进行重写\n\n- 查询规划模块\n    \n    > 根据查询树生成查询计划\n\n- 查询执行模块\n    \n    > 按照查询计划的安排，调用存储、索引、并发等功能模块，按照各个计划节点的实现算法来执行数据的读取和修改。\n\n**数据流信息**\n\n- 存储指令\n    \n    > 查询执行模块执行后向存储模块发出的指令\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const _e=(0,r.A)(Ce,[["render",Fe]]);var Te=_e;const Me=e=>((0,l.Qi)("data-v-2c8017ec"),e=e(),(0,l.jt)(),e),Se={class:"common-layout"},we=Me((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ae={class:"header-content"},Ee=(0,l.eW)("Back"),He=Me((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M4(事务模块)",-1))),Pe=Me((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Xe={class:"image-container"},Ie=["src"],Ne={name:"image-map",id:"image-map"},Re=["shape","coords","href","onClick","onMouseover","onMouseout"],$e=Me((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Oe=(0,l.eW)("Next step"),De=["innerHTML"],Be={key:0,class:"rounded-box"},We=Me((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Qe=[We];function je(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Se,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[we,(0,l.Lk)("div",Ae,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Ee])),_:1},8,["onClick"]),He]),Pe])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Xe,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Ie),(0,l.Lk)("map",Ne,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Re)))),128))])]),$e,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Oe])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,De),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Be,Qe)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ze={data(){return{active:0,imageSrc:"/pictures/level1/L1M4.png",hotspots:[{id:"1",shape:"poly",coords:"580,85, 810,85, 810,200, 580,200",href:"/l2m4m1"},{id:"2",shape:"poly",coords:"580,300, 810,300, 810,415, 580,415",href:"/l2m4m2"},{id:"3",shape:"poly",coords:"990,85, 1220,85, 1220,200, 990,200",href:"/l2m4m3"},{id:"4",shape:"poly",coords:"20,85, 250,85, 250,200, 20,200",href:"/l2m2m4"},{id:"5",shape:"poly",coords:"580,520, 810,520, 810,635, 580,635",href:"/l1m3"}],markdownText:"本模块主要与编译执行模块进行交互，包含三个子模块：\n- 事务管理器：管理事务状态，调动其他模块，是事务管理模块的心脏。\n- 锁管理模块：管理锁的使用，包括进程管理器，MVCC并发控制。\n- 日志管理器：管理日志的写入，包括数据库历史恢复。\n事务管理系统是PostgreSQL数据库系统中的关键组件，负责确保数据库的数据一致性、隔离性、持久性和可靠性，同时支持多个并发事务的执行。具体有如下的七个功能：\n\n1. 事务的启动、提交、回滚：\n\n提供开始事务和提交事务的机制，确保一组相关操作可以以原子性的方式被提交。允许在事务执行中发生错误或者需要取消操作时回滚事务，以确保数据库的一致性。\n\n2. 事务状态管理：\n\n追踪事务的状态，例如活动事务的列表、事务的隔离级别等。\n\n3. 事务日志管理：\n\n记录事务的变更，通常通过写日志来实现 Write-Ahead Logging（WAL）机制，以确保数据库的持久性和可恢复性。\n\n4. 锁管理：\n\n管理对共享资源的并发访问，确保多个事务之间能够正确协调对同一资源的访问。\n\n5. 并发控制：\n\n处理多个并发执行的事务，确保它们之间不会产生冲突，例如读-写冲突、写-写冲突。常见的并发控制机制包括锁和多版本并发控制（MVCC）。\n\n6. 死锁检测与处理：\n\n检测并发事务之间可能发生的死锁，并采取相应的措施解决死锁问题。\n\n7. 分布式事务管理：\n\n在分布式数据库系统中，协调跨多个节点的事务，确保分布式环境下的一致性和隔离性。",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Ue=(0,r.A)(ze,[["render",je],["__scopeId","data-v-2c8017ec"]]);var Ve=Ue;const qe=e=>((0,l.Qi)("data-v-0a9162d4"),e=e(),(0,l.jt)(),e),Ke={class:"common-layout"},Ge=qe((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Je={class:"header-content"},Ye=(0,l.eW)("Back"),Ze=qe((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M3",-1))),et=qe((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),tt={class:"image-container"},nt=["src"],at={name:"image-map",id:"image-map"},lt=["shape","coords","href","onClick","onMouseover","onMouseout"],ot=qe((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),st=(0,l.eW)("Next step"),it={key:0,class:"rounded-box"},rt=qe((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ct=[rt];function pt(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Ke,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ge,(0,l.Lk)("div",Je,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Ye])),_:1},8,["onClick"]),Ze]),et])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",tt,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,nt),(0,l.Lk)("map",at,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,lt)))),128))])]),ot,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[st])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",it,ct)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var dt={data(){return{active:0,imageSrc:"/pictures/level1/L1M3.png",hotspots:[{id:"1",shape:"poly",coords:"44,78, 44,225, 60,260, 100,275, 680,275, 720,260, 743,225, 743,78, 720,43, 680,28, 100,28, 60,43, 44,78",href:"/l2m2m2"},{id:"5",shape:"poly",coords:"90,528, 325,528, 330,533, 335,538, 335,653, 330,658, 325,663, 90,663, 85,658, 80,653, 80,538, 85,533",href:"/l2m3m1"},{id:"6",shape:"poly",coords:"872,27, 1158,27, 1163,32, 1168,37, 1168,257, 1163,262, 1158,267, 872,267, 867,262, 862,257, 862,37, 867,32, 872,27",href:"/l1m4"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const mt=(0,r.A)(dt,[["render",pt],["__scopeId","data-v-0a9162d4"]]);var ut=mt;const ht={class:"common-layout"},gt={class:"header-content"},kt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L2")],-1),ft=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}}," 现在位于    第 2 层",-1),bt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),vt=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),Lt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M1")],-1),yt=(0,l.Lk)("a",{style:{"font-size":"32px","font-weight":"600"}},"查询分析模块 ",-1),xt={class:"content-wrapper"},Ft={class:"image-container"},Ct=["src"],_t={name:"image-map",id:"image-map"},Tt=["shape","coords","href","onClick","onMouseover","onMouseout"],Mt={class:"steps-button-container"},St=(0,l.eW)(" Next step "),wt={class:"markdown-container"},At=["innerHTML"],Et={key:0,class:"rounded-box"},Ht=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Pt=[Ht];function Xt(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",ht,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",gt,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[kt])),default:(0,l.k6)((()=>[ft])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[bt])),default:(0,l.k6)((()=>[vt])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[Lt])),default:(0,l.k6)((()=>[yt])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",xt,[(0,l.Lk)("div",Ft,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,Ct),(0,l.Lk)("map",_t,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Tt)))),128))]),(0,l.Lk)("div",Mt,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[St])),_:1},8,["onClick"])])]),(0,l.Lk)("div",wt,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,At)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Et,Pt)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var It={data(){return{activeName:"third",active:0,imageSrc:"/pictures/level2/L2M2M1.png",hotspots:[{id:"1",shape:"poly",coords:"935,578,936,673,939,683,944,688,953,693,1260,693,1269,688,1275,681,1279,679,1280,575,1274,566,1267,559,953,557,938,564",href:"/l2m2m2"},{id:"1",shape:"poly",coords:"19, 121, 219, 120, 231, 114, 237, 111, 242, 105, 242, 3, 237, -4, 233, -10, 224, -13, 21, -12, 4, -11, -1, 1, -1, 7, 2, 107, 9, 116",href:"/l1m1"}],markdownText:"**总览**\n\n> 进行词法分析、语法分析和语义分析生成查询树，并且判断sql语句类型。\n\n**数据流信息**\n\n- 查询语句query_string\n    > 用户发送的sql语句字符串\n\n- 分析树parsetree_list\n    > 经过词法分析和语法分析生成的分析树parsetree_list，postgre单独定义了一种结构体List来存放这类数据：\n\n    ```C++\n    typedef union ListCell\n    {\n    void     ptr_value;\n    int     int_value;\n    Oid     oid_value;\n    } ListCell;\n    \n    typedef struct List\n    {\n    *   NodeTag   type;     /* T_List, T_IntList, or T_OidList /\n    *   int     length;     /* number of elements currently present /\n    *   int     max_length;   /* allocated length of elements[] */\n    ListCell   elements;   / re-allocatable array of cells /\n    *   /* We may allocate some cells along with the List header: /\n    ListCell  initial_elements[FLEXIBLE_ARRAY_MEMBER];\n    *   /* If elements == initial_elements, it's not a separate allocation */\n    } List;\n    ```\n\n- Query结构体\n    > 用来存放查询功能用到的关键属性，例如查询命令类型，查询范围等等，以便后续的查询重写和查询规划。\n\n    ```c++\n    typedef struct Query\n    {\n    NodeTag   type;\n    CmdType   commandType;  /* select|insert|update|delete|merge|utility /\n    *   QuerySource querySource;  /* where did I come from? /\n    *   int     resultRelation; /* rtable index of target relation for\n                    * INSERT/UPDATE/DELETE/MERGE; 0 for SELECT */\n    List     rtable;     / list of range table entries */\n    FromExpr   jointree;   / table join tree (FROM and WHERE clauses);\n                    * also USING clause for MERGE */\n    List     targetList;   / target list (of TargetEntry) */\n    } Query;\n    ```\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Nt=(0,r.A)(It,[["render",Xt]]);var Rt=Nt;const $t={class:"common-layout"},Ot={class:"header-content"},Dt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L2")],-1),Bt=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}}," 现在位于    第 2 层",-1),Wt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),Qt=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),jt=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),zt=(0,l.Lk)("a",{style:{"font-size":"32px","font-weight":"600"}},"查询重写模块 ",-1),Ut={class:"content-wrapper"},Vt={class:"image-container"},qt=["src"],Kt={name:"image-map",id:"image-map"},Gt=["shape","coords","href","onClick","onMouseover","onMouseout"],Jt={class:"steps-button-container"},Yt=(0,l.eW)(" Next step "),Zt={class:"markdown-container"},en=["innerHTML"],tn={key:0,class:"rounded-box"},nn=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),an=[nn];function ln(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",$t,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ot,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[Dt])),default:(0,l.k6)((()=>[Bt])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[Wt])),default:(0,l.k6)((()=>[Qt])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[jt])),default:(0,l.k6)((()=>[zt])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ut,[(0,l.Lk)("div",Vt,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,qt),(0,l.Lk)("map",Kt,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Gt)))),128))]),(0,l.Lk)("div",Jt,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[Yt])),_:1},8,["onClick"])])]),(0,l.Lk)("div",Zt,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,en)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",tn,an)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var on={data(){return{activeName:"third",active:0,imageSrc:"/pictures/level2/L2M2M2.png",hotspots:[{id:"1",shape:"poly",coords:"9,103,188,102,199,98,204,94,205,80,204,16,201,7,195,4,192,1,16,1,7,3,4,6,1,19,1,90,3,97",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"675,720,854,719,865,715,870,711,871,697,870,633,867,624,861,621,858,618,682,618,673,620,670,623,667,636,667,707,669,714",href:"/l2m2m3"}],markdownText:"**总览**\n\n> 根据已定义的规则对查询树进行重写\n\n**数据流信息**\n\n- `Query`，查询结构体\n\n- 以List*结构体构建的 `querytree_list` 查询树链表，重写后可能变为0-N个查询树，因此变为链表\n\n**图内数据结构及重要节点展示：**\n\n- Query ：查询结构体，已在L2M2M1展示过\n- querytree_list 实际上是List*, 节点内装入Query*，简单的链表结构\n\n- 入口函数：在此处将查询结构体区分为 `utilitie` (非数据检索任务，如数据定义`CREATE TABLE`等)和 非`utilitie`，前者不进行重写，统一数据结构后直接结束本模块\n\n- 查询结构体表生成器(`list_make1`)：主要功能是统一输出，将`utilitie`方向的输出从单个`Query`变为一个链表\n\n- 规则：查询重写的核心是规则系统，可以是通过CREATE RULE定义，也可以是“视图”(PG的视图实际上是定义了一个规则)。规则按命令分为 **SELECT/INSERT/UPDATE/DELETE**， 按动作分为**INSTEAD/ALSO**\n  \n    - INSTEAD将原来的操作替换，ALSO在原操作基础上额外做动作\n    \n    - SELECT规则为一个动作的无条件INSTEAD规则（安全性等诸多因素限制）\n    \n    - SELECT规则别称RIR规则，这是历史遗留，在古代（PostQUEL时代）的RETRIEVE对应于现在的SELECT，所以全称是`RETRIEVE-INSTEAD-RULE`\n\n- 非RIR规则应用：对INSERT/UPDATE/DELETE处理，主要调整CTE(`Common`**` `**`Table`**` `**`Expressions` 公用表表达式 / 临时结果集)和`TargetList`\n\n- RIR规则应用：对SELECT处理，调整RTE(`Range Table`范围表，可以是表或子查询)和CTE\n\n- 设置命令结果标签：标识出哪个`Query`是重写后查询的最终结果，即字段`canSetTag`\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)}}};const sn=(0,r.A)(on,[["render",ln]]);var rn=sn;const cn={class:"common-layout"},pn={class:"header-content"},dn=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L2")],-1),mn=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"现在位于    第 2 层",-1),un=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),hn=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),gn=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1),kn=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划模块",-1),fn={class:"content-wrapper"},bn={class:"image-container"},vn=["src"],Ln={name:"image-map",id:"image-map"},yn=["shape","coords","href","onClick","onMouseover","onMouseout"],xn={class:"steps-button-container"},Fn=(0,l.eW)(" Next step "),Cn={class:"markdown-container"},_n=["innerHTML"],Tn={key:0,class:"rounded-box"},Mn=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Sn=[Mn];function wn(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",cn,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",pn,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[dn])),default:(0,l.k6)((()=>[mn])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[un])),default:(0,l.k6)((()=>[hn])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[gn])),default:(0,l.k6)((()=>[kn])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",fn,[(0,l.Lk)("div",bn,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,vn),(0,l.Lk)("map",Ln,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,yn)))),128))]),(0,l.Lk)("div",xn,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[Fn])),_:1},8,["onClick"])])]),(0,l.Lk)("div",Cn,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,_n)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Tn,Sn)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var An={data(){return{activeName:"third",active:0,imageSrc:"/pictures/level2/L2M2M3.png",hotspots:[{id:"1",shape:"poly",coords:"53,191,266,190,276,185,280,180,281,85,276,78,269,72,57,70,47,74,44,80,41,84,40,175,45,184",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"1142,790,1141,883,1144,890,1147,900,1153,901,1366,901,1375,895,1381,887,1380,787,1377,781,1372,778,1367,773,1158,771,1148,774,1144,780",href:"/l2m2m4"},{id:"3",shape:"poly",coords:"1142,420,1141,513,1144,520,1147,530,1153,531,1366,531,1375,525,1381,517,1380,417,1377,411,1372,408,1367,403,1158,401,1148,404,1144,410",href:"/l3m2m3m3"},{id:"3",shape:"poly",coords:"561,418,560,511,563,518,566,528,572,529,785,529,794,523,800,515,799,415,796,409,791,406,786,401,577,399,567,402,563,408",href:"/l3m2m3m2"},{id:"3",shape:"poly",coords:"42,418,41,511,44,518,47,528,53,529,266,529,275,523,281,515,280,415,277,409,272,406,267,401,58,399,48,402,44,408",href:"/l3m2m3m1"}],markdownText:"**总览**\n\n> 根据查询树生成查询计划\n\n**数据流信息**\n\n- `querytree_list` 查询树链表\n- 以`PlannedStmt`结构体构建起的链表`plantree_list`\n\nFor Each ：在查询规划模块中，接受查询树链表，输出计划树链表，在处理过程中对每棵查询树生成计划树，最后汇总\n\n- 规划信息PlannerInfo：贯穿整个规划过程，记录规划过程中所需要的各种数据，包括路径信息等\n\n```C\nstruct PlannerInfo\n{\n    NodeTag     type;\n    Query      *parse;          /* the Query being planned */ //正在处理的Query\n    PlannerGlobal *glob;        /* global info for current planner run */\n    Index       query_level;    /* 1 at the outermost Query */\n    PlannerInfo *parent_root;   /* NULL at outermost Query */\n    List      *plan_params;    /* list of PlannerParamItems, see below */\n    Bitmapset  *outer_params;\n    struct RelOptInfo **simple_rel_array;   /* All 1-rel RelOptInfos */ \n    int         simple_rel_array_size;  /* allocated size of array */\n    //省略N行，非常庞大\n};\n```\n\n- 优化信息RelOptInfo：存放优化信息，最重要的是包含了路径信息\n\n```C\ntypedef struct RelOptInfo\n{\n        NodeTag                type;\n        RelOptKind        reloptkind;\n        /* all relations included in this RelOptInfo */\n        Relids                relids;                        /* set of base relids (rangetable indexes) */\n        /* size estimates generated by planner */\n        double                rows;                        /* estimated number of result tuples */\n        /* default result targetlist for Paths scanning this relation */\n        struct PathTarget *reltarget;        /* list of Vars/Exprs, cost, width */\n        /* materialization information */\n        List           *pathlist;                /* Path structures */\n        List           *ppilist;                /* ParamPathInfos used in pathlist */\n        List           *partial_pathlist;        /* partial Paths */\n        struct Path *cheapest_startup_path;\n        struct Path *cheapest_total_path;\n        struct Path *cheapest_unique_path;\n        List           *cheapest_parameterized_paths;\n        //省略N行，非常庞大\n} RelOptInfo;\n```\n\n- 路径Path：路径信息\n\n```C\nstruct Path\n{\n    NodeTag     type;\n\n    NodeTag     pathtype;       /* tag identifying scan/join method */\n\n    RelOptInfo *parent;         /* the relation this path can build */\n    PathTarget *pathtarget;     /* list of Vars/Exprs, cost, width */\n    ParamPathInfo *param_info;  /* parameterization info, or NULL if none */\n\n//并行信息\n    bool        parallel_aware; /* engage parallel-aware logic? */\n    bool        parallel_safe;  /* OK to use as part of parallel plan? */\n    int         parallel_workers;   /* desired # of workers; 0 = not parallel */\n\n//cost信息\n    /* estimated size/costs for path (see costsize.c for more info) */\n    Cardinality rows;           /* estimated number of result tuples */\n    Cost        startup_cost;   /* cost expended before fetching any tuples */\n    Cost        total_cost;     /* total cost (assuming all tuples fetched) */\n\n// 路径键\n    List       *pathkeys;       /* sort ordering of path's output */\n}\n```\n\n- 预处理模块：进行预处理和优化查询(部分)，生成规划信息用于路径生成\n- 路径生成模块：生成查询路径，存放到规划信息中\n- 计划生成模块：细化路径（如确定扫描方法），生成足够详细的计划\n- 在整个查询规划结束后，N个输入的计划树产生的N个计划语句被打包为一个list运走\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const En=(0,r.A)(An,[["render",wn]]);var Hn=En;const Pn={class:"common-layout"},Xn={class:"header-content"},In=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L2")],-1),Nn=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}}," 现在位于    第 2 层",-1),Rn=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),$n=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),On=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M1")],-1),Dn=(0,l.Lk)("a",{style:{"font-size":"32px","font-weight":"600"}},"查询执行模块 ",-1),Bn={class:"content-wrapper"},Wn={class:"image-container"},Qn=["src"],jn={name:"image-map",id:"image-map"},zn=["shape","coords","href","onClick","onMouseover","onMouseout"],Un={class:"steps-button-container"},Vn=(0,l.eW)(" Next step "),qn={class:"markdown-container"},Kn=["innerHTML"],Gn={key:0,class:"rounded-box"},Jn=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Yn=[Jn];function Zn(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Pn,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Xn,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[In])),default:(0,l.k6)((()=>[Nn])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[Rn])),default:(0,l.k6)((()=>[$n])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[On])),default:(0,l.k6)((()=>[Dn])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",Bn,[(0,l.Lk)("div",Wn,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,Qn),(0,l.Lk)("map",jn,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,zn)))),128))]),(0,l.Lk)("div",Un,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[Vn])),_:1},8,["onClick"])])]),(0,l.Lk)("div",qn,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Kn)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Gn,Yn)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ea={data(){return{activeName:"third",active:0,imageSrc:"/pictures/level2/L2M2M4.png",hotspots:[{id:"1",shape:"poly",coords:"16,231,188,230,197,226,200,223,200,214,199,142,194,134,193,132,187,130,11,130,4,134,2,138,-1,143,-1,215,0,223,6,227",href:"/l2m2m3"},{id:"2",shape:"poly",coords:"1094,346,1266,345,1275,341,1278,338,1278,329,1277,257,1272,249,1271,247,1265,245,1089,245,1082,249,1080,253,1077,258,1077,330,1078,338,1084,342",href:"/l1m3"},{id:"3",shape:"poly",coords:"1093,119,1265,118,1274,114,1277,111,1277,102,1276,30,1271,22,1270,20,1264,18,1088,18,1081,22,1079,26,1076,31,1076,103,1077,111,1083,115",href:"/l1m4"}],markdownText:"- - **总述**\n\n  - > 经过前面几部分将sql语句转换成执行计划后，会将执行计划plantree传递给查询执行器。总体上看，查询执行器就是按照查询计划的安排，调用存储、索引、并发等功能模块，按照各个计划节点的实现算法来执行数据的读取和修改。\n\n  - **模块信息**\n\n  - - 策略选择模块 Portal\n      - > Portal模块将sql语句划分为两种类型，后续分别执行。整个查询执行的策略选择、启动、回收都由Portal 组件完成。\n    - 功能处理器 UtilityProcessor\n      - > 处理数据定义语句，根据不同功能分别调用\n    - 执行器 Executor\n      - > 处理可优化语句，包含若干个查询计划树，严格按计划树执行\n\n  - **数据流信息**\n\n  - - 计划树表 plantree_list\n      - > 查询规划模块处理结束后生成的计划树列表。\n    - 计划语句 PlannedStmt\n      - > 计划语句 PlannedStmt 是计划树表 plantree_list 内的元素，封装了查询规划模块生成的计划树 planTree，包含了一次执行所需的全部信息。\n\n      - ```SQL\n        /* ----------------\n         *                PlannedStmt node\n         *\n         * The output of the planner is a Plan tree headed by a PlannedStmt node.\n         * PlannedStmt holds the \"one time\" information needed by the executor.\n         *\n         * For simplicity, we also wrap utility statements in PlannedStmt nodes.\n         * ----------------\n         */\n        typedef struct PlannedStmt\n        {\n                NodeTag                type;\n        \n                CmdType                commandType;        /* select|insert|update|delete|merge|utility */\n        \n                /* ... */\n                \n                struct Plan *planTree;                /* tree of Plan nodes */\n                \n                /* ... */\n        \n        } PlannedStmt;\n        ```\n    - 查询描述符 QueryDesc\n      - > Portal在处理查询语句前会将 plantree_list 封装成查询描述符 QueryDesc，其中包含了执行器执行查询所需的所有内容。\n\n      - ```C\n        /* ----------------\n         *                query descriptor:\n         *\n         *        a QueryDesc encapsulates everything that the executor\n         *        needs to execute the query.\n         * ---------------------\n         */\n        typedef struct QueryDesc\n        {\n                /* These fields are provided by CreateQueryDesc */\n                CmdType                operation;                /* CMD_SELECT, CMD_UPDATE, etc. */\n                PlannedStmt *plannedstmt;        /* planner's output (could be utility, too) */\n                \n                /* ... */\n                \n                /* These fields are set by ExecutorStart */\n                TupleDesc        tupDesc;                /* descriptor for result tuples */\n                EState           *estate;                        /* executor's query-wide state */\n                PlanState  *planstate;                /* tree of per-plan-node state */\n        \n                /* This field is set by ExecutorRun */\n                bool                already_executed;        /* true if previously executed */\n        \n                /* This is always set NULL by the core system, but plugins can change it */\n                struct Instrumentation *totaltime;        /* total time spent in ExecutorRun */\n        } QueryDesc;\n        ```\n\n#### 策略选择模块(Portal)\n\n**算法解析**\n\nPortal模块将sql语句划分为两种类型：\n\n- 执行计划树操作  ：可优化语句(DML，如SELECT，INSERT，UPDATE，DELETE)\n- 非执行计划树操作 ：数据定义语句(DDL，如CREATE TABLE)\n\n整个查询执行的策略选择、启动、回收 都由Portal 组件完成\n![img](/pictures/level2/portal_ari.png)\n\nPortal数据结构：\n\n```C++\ntypedef struct PortalData *Portal;\n  \n typedef struct PortalData\n {\n     /* Bookkeeping data */\n     const char *name;           /* portal's name */\n  \n     /* The query or queries the portal will execute */\n     const char *sourceText;     /* text of query (as of 8.4, never NULL) */\n     CommandTag  commandTag;     /* command tag for original query */\n     List       *stmts;          /* list of PlannedStmts */\n     // 查询树链表\n     /* If not NULL, Executor is active; call ExecutorEnd eventually: */\n     QueryDesc  *queryDesc;      /* info needed for executor invocation */\n     // 查执行所需的所有信息\n     /* If portal returns tuples, this is their tupdesc: */\n     TupleDesc   tupDesc;        /* descriptor for result tuples */\n     // 可能的返回元组的结构\n     /* Features/options */\n     PortalStrategy strategy;    /* see above */\n     \n     /* Status data */\n     PortalStatus status;        /* see above */\n } PortalData;  \n```\n\n选择执行策略时主要根据原子操作的命令类型（是否是功能语句）以及查询树链表中原子操作的个数（是否仅为一个）。执行策略共分为以下五种：\n\n```C++\ntypedef enum PortalStrategy\n{\n    // 处理 SELECT 类语句，调用执行器\n    PORTAL_ONE_SELECT,\n    // 需要进行元组操作、缓存结果，调用执行器执行\n    PORTAL_ONE_RETURNING,\n    // 包含 SELECT 查询且有修改的 CTE\n    PORTAL_ONE_MOD_WITH,\n    // 单一数据定义语句，调用功能处理器\n    PORTAL_UTIL_SELECT,\n    // 混合策略，处理多个原子操作\n    PORTAL_MULTI_QUERY,\n} PortalStrategy;\n```\n\n#### 功能处理器(UtilityProcessor)\n![img](/pictures/level2/up.png)\n\n**总述**\n\n> UtilityProcessor 功能处理器负责处理数据定义（DDL）语句，会根据不同功能分别调用功能子函数。入口函数 ProcessUtility 会调用 standard_ProcessUtility，为该函数提供要执行的语句的类型、内容等，在内部依据 nodeTag 分发对应的操作。\n\n**算法解析**\n\n大体上可以将 nodeTag 分为以下类别：\n\n| 节点类型nodeTag        | 核心处理函数          | 功能                                           |\n| ---------------------- | --------------------- | ---------------------------------------------- |\n| T_TransactionStmt      | BeginTransactionBlock | 标记事务开始                                   |\n| EndTransactionBlock    | 结束事务              |                                                |\n| DefineSavepoint        | 定义保存点            |                                                |\n| RollbackToSavepoint    | 回滚到保存点          |                                                |\n| T_PlannedStmt          | PerformCursorOpen     | 打开游标操作，初始化查询                       |\n| T_ClosePortalStmt      | PerformPortalClose    | 关闭游标，释放游标占用资源                     |\n| T_FetchStmt            | PerformPortalFetch    | 执行 FETCH/MOVE 操作                           |\n| T_CreateStmt           | DefineRelation        | 创建关系表                                     |\n| T_CreateTableSpaceStmt | CreateTableSpace      | 创建 tablespace，记录在 pg_tablespace 系统表中 |\n| T_DropStmt             | RemoveRelations       | 删除关系表                                     |\n| RemoveTypes            | 删除自定义类型        |                                                |\n| T_CommentStmt          | CommentObiect         | 记录注释信息到 pg_description                  |\n| T_CopyStmt             | DoCopy                | 完成 COPY 命令操作                             |\n| T_AlterTableStmt       | AlterTable            | 实现 ALTER TABLE 命令                          |\n| T_IndexStmt            | DefineIndex           | 创建索引                                       |\n| T_CreateSeqStmt        | DefineSequence        | 创建一个用于自增属性的关系表                   |\n| T_ExplainStmt          | ExplainQuery          | 执行 EXPLAIN 命令                              |\n\n#### L3M2M4M3(执行器)\n\n对于可优化的语句，psql 最后会生成一个查询计划树。查询逻辑使用逻辑代数表示，在执行时需要物理代数(physical algebra)。\n\nPSQL 中的执行计划可以组织成一个二叉树（查询计划树）：每个物理操作符拥有 0~2 个输入和 1 个输出。在执行时数据流（元组）从下层流向上层，下层节点的输出作为上层节点的输入。根节点的输出即为查询的结果。\n\n![img](/pictures/level2/portal.png)\n\n物理代数的计划节点按照功能分为四类：控制节点(control node)、扫描节点(scan node)、连接节点(join node)和物化节点(materialization node)。他们都继承于公共父类 Plan，并为扫描、连接节点定义了公共父类 Scan，Join。Hash连接属于连接节点，故继承于Join。\n\n```C++\n// 计划节点数据结构\ntypedef struct Plan\n{\n    NodeTag     type;\n    /*\n     * Common structural data for all Plan types.\n     */\n    int         plan_node_id;   /* unique across entire final plan tree */\n    List       *targetlist;     /* target list to be computed at this node */\n    List       *qual;           /* implicitly-ANDed qual conditions */\n    struct Plan *lefttree;      /* input plan tree(s) */\n    struct Plan *righttree;\n    List       *initPlan;       /* Init Plan nodes (un-correlated expr\n                                 * subselects) */\n    Bitmapset  *extParam;\n    Bitmapset  *allParam;\n} Plan;\n\ntypedef struct Scan\n{\n    Plan        plan;\n    Index       scanrelid;      /* relid is index into the range table */\n} Scan;\n\ntypedef struct Join\n{\n    Plan        plan;\n    JoinType    jointype;\n    bool        inner_unique;\n    List       *joinqual;       /* JOIN quals (in addition to plan.qual) */\n} Join;\n```\n\n查询计划树的初始化：Executor对查询计划树的初始化都是从根节点开始，递归对其子节点进行初始化。初始化由 ExeclnitNode 函数进行。每一种计划节点都有专门的初始化函数。在初始化的时候层层向下递归，完成初始化后层层返回。最终构造出完整的计划树：\n\n```C++\nPlanState *\nExecInitNode(Plan *node, EState *estate, int eflags)\n{\n    PlanState  *result;\n    List       *subps;\n    ListCell   *l;\n    if (node == NULL)\n        return NULL;\n    check_stack_depth();\n\n    switch (nodeTag(node))\n    {\n        case T_Result:\n            result = (PlanState *) ExecInitResult((Result *) node, estate, eflags);\n            break;\n        .........\n```\n\n查询计划执行：实际执行部分由 ExecutePlan 函数完成。ExecutePlan 实际上是一个大循环，每次循环调用 ExecProcNode，从计划树中获取一个元组并进行相应处理.\n\n执行器清理：当执行器处理完所有可获得的元组后，有ExecutorEnd函数进行善后。该函数的运行逻辑与ExecInitNode本质上一样，针对不同类型节点调用不同的清理函数，并从根节点开始递归清理。\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ta=(0,r.A)(ea,[["render",Zn]]);var na=ta;const aa=e=>((0,l.Qi)("data-v-283b8809"),e=e(),(0,l.jt)(),e),la={class:"common-layout"},oa=aa((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),sa={class:"header-content"},ia=(0,l.eW)("Back"),ra=aa((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M3M1",-1))),ca=aa((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),pa={class:"image-container"},da=["src"],ma={name:"image-map",id:"image-map"},ua=["shape","coords","href","onClick","onMouseover","onMouseout"],ha=aa((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),ga=(0,l.eW)("Next step"),ka={key:0,class:"rounded-box"},fa=aa((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ba=[fa];function va(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",la,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[oa,(0,l.Lk)("div",sa,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ia])),_:1},8,["onClick"]),ra]),ca])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",pa,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,da),(0,l.Lk)("map",ma,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ua)))),128))])]),ha,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[ga])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",ka,ba)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var La={data(){return{active:0,imageSrc:"/pictures/level2/L2M3M1.png",hotspots:[{id:"6",shape:"poly",coords:"145,49,1296,49,1306,59,1306,227,1296,237,145,237,135,227,135,59",href:"/your-new-route"},{id:"1",shape:"poly",coords:"168,610,308,610,318,620,318,681,308,691,168,691,158,681,158,620",href:"/l3m3m1m3"},{id:"2",shape:"poly",coords:"392,603,562,603,567,608,572,613,572,686,567,691,562,696,392,696,387,691,382,686,382,613,387,608",href:"/l3m3m1m2"},{id:"3",shape:"poly",coords:"860,603,1050,603,1055,608,1060,613,1060,686,1055,691,1050,696,860,696,855,691,850,686,850,613,855,608",href:"/l3m3m1m1"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ya=(0,r.A)(La,[["render",va],["__scopeId","data-v-283b8809"]]);var xa=ya;const Fa={class:"common-layout"},Ca={class:"header-content"},_a=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L2")],-1),Ta=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}}," 现在位于    第 2 层",-1),Ma=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1),Sa=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"存储模块",-1),wa=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),Aa=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"内存模块",-1),Ea={class:"content-wrapper"},Ha={class:"image-container"},Pa=["src"],Xa={name:"image-map",id:"image-map"},Ia=["shape","coords","href","onClick","onMouseover","onMouseout"],Na={class:"steps-button-container"},Ra=(0,l.eW)(" Next step "),$a={class:"markdown-container"},Oa=["innerHTML"],Da={key:0,class:"rounded-box"},Ba=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Wa=[Ba];function Qa(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Fa,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ca,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[_a])),default:(0,l.k6)((()=>[Ta])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[Ma])),default:(0,l.k6)((()=>[Sa])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[wa])),default:(0,l.k6)((()=>[Aa])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ea,[(0,l.Lk)("div",Ha,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,Pa),(0,l.Lk)("map",Xa,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Ia)))),128))]),(0,l.Lk)("div",Na,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[Ra])),_:1},8,["onClick"])])]),(0,l.Lk)("div",$a,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Oa)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Da,Wa)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ja={data(){return{activeName:"second",active:0,imageSrc:"/pictures/level2/L2M3M2.png",hotspots:[{id:"1",shape:"poly",coords:"356,335,357,413,359,422,362,423,365,427,371,429,549,429,555,428,561,425,564,417,566,415,567,338,565,332,561,326,556,325,371,322,363,328,359,327",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"355,559,356,637,358,646,361,647,364,651,370,653,548,653,554,652,560,649,563,641,565,639,566,562,564,556,560,550,555,549,370,546,362,552,358,551",href:"/l2m2m4"},{id:"3",shape:"poly",coords:"882,429,1117,429,1125,427,1131,420,1131,415,1133,408,1133,336,1129,326,1122,322,881,322,872,326,869,333,866,348,868,413,872,422,876,425",href:"/l2m2m2"},{id:"4",shape:"poly",coords:"881,653,1116,653,1124,651,1130,644,1130,639,1132,632,1132,560,1128,550,1121,546,880,546,871,550,868,557,865,572,867,637,871,646,875,649",href:"/l2m2m3"},{id:"5",shape:"poly",coords:"0,796,1,874,3,883,6,884,9,888,15,890,193,890,199,889,205,886,208,878,210,876,211,799,209,793,205,787,200,786,15,783,7,789,3,788",href:"/l1m3"},{id:"6",shape:"poly",coords:"367,105,555,105,561,102,565,97,567,90,567,14,564,7,556,2,552,1,367,1,362,4,359,11,355,13,355,92,358,99,363,103",href:"/l1m1"}],markdownText:"**总览**\n\n> 完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作。\n\n**模块信息**\n\n- 查询分析模块\n    \n    > 进行词法分析、语法分析和语义分析生成查询树，并且判断sql语句类型。 \n\n- 查询重写模块\n    \n    > 根据已定义的规则对查询树进行重写\n\n- 查询规划模块\n    \n    > 根据查询树生成查询计划\n\n- 查询执行模块\n    \n    > 按照查询计划的安排，调用存储、索引、并发等功能模块，按照各个计划节点的实现算法来执行数据的读取和修改。\n\n**数据流信息**\n\n- 存储指令\n    \n    > 查询执行模块执行后向存储模块发出的指令\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const za=(0,r.A)(ja,[["render",Qa]]);var Ua=za;const Va={},qa=Va;var Ka=qa;const Ga=e=>((0,l.Qi)("data-v-694050d0"),e=e(),(0,l.jt)(),e),Ja={class:"common-layout"},Ya=Ga((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Za={class:"header-content"},el=(0,l.eW)("Back"),tl=Ga((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M1(事务管理器)",-1))),nl=Ga((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),al={class:"image-container"},ll=["src"],ol={name:"image-map",id:"image-map"},sl=["shape","coords","href","onClick","onMouseover","onMouseout"],il=Ga((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),rl=(0,l.eW)("Next step"),cl=["innerHTML"],pl={key:0,class:"rounded-box"},dl=Ga((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ml=[dl];function ul(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Ja,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ya,(0,l.Lk)("div",Za,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[el])),_:1},8,["onClick"]),tl]),nl])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",al,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,ll),(0,l.Lk)("map",ol,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,sl)))),128))])]),il,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[rl])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,cl),s.active>=1?((0,l.uX)(),(0,l.CE)("div",pl,ml)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var hl={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M1.png",hotspots:[{id:"1",shape:"poly",coords:"380,2,595,2,595,110,380,110",href:"/l3m4m1m1"},{id:"2",shape:"poly",coords:"380,702,595,702,595,810,380,810",href:"/l3m4m1m2"},{id:"3",shape:"poly",coords:"1000,0,1210,0,1210,100,1000,100",href:"/l2m4m3"},{id:"4",shape:"poly",coords:"380,902,595,902,595,1010,380,1010",href:"/l2m4m2"},{id:"5",shape:"poly",coords:"5,265,215,265,215,375,5,375",href:"/l2m2m4"}],markdownText:" 说明信息：\n对于本模块，需要分别应对不同的事务指令，不同事务类型有不同的操作。\n事务块的主要状态之间的转换关系如下：\n![img](/pictures/level2/state.png)\n事务状态(TransState=transaction state from server perspective)是enum枚举数据类型，一共含有6个状态，包括`TRANS_DEFAULT`，`TRANS_START`，`TRANS_INPROGRESS`，`TRANS_COMMIT`，`TRANS_ABORT`和`TRANS_PREPARE`。",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const gl=(0,r.A)(hl,[["render",ul],["__scopeId","data-v-694050d0"]]);var kl=gl;const fl=e=>((0,l.Qi)("data-v-d2f1c2b0"),e=e(),(0,l.jt)(),e),bl={class:"common-layout"},vl=fl((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ll={class:"header-content"},yl=(0,l.eW)("Back"),xl=fl((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M2(日志管理器)",-1))),Fl=fl((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Cl={class:"image-container"},_l=["src"],Tl={name:"image-map",id:"image-map"},Ml=["shape","coords","href","onClick","onMouseover","onMouseout"],Sl=fl((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),wl=(0,l.eW)("Next step"),Al=["innerHTML"],El={key:0,class:"rounded-box"},Hl=fl((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Pl=[Hl];function Xl(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",bl,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[vl,(0,l.Lk)("div",Ll,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[yl])),_:1},8,["onClick"]),xl]),Fl])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Cl,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,_l),(0,l.Lk)("map",Tl,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Ml)))),128))])]),Sl,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[wl])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Al),s.active>=1?((0,l.uX)(),(0,l.CE)("div",El,Pl)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Il={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M2.png",hotspots:[{id:"1",shape:"poly",coords:"510,250,510,350,720,350,720,250,",href:"/l3m4m2m1"},{id:"2",shape:"poly",coords:"510,420,510,520,720,520,720,420,",href:"/l1m3"},{id:"3",shape:"poly",coords:"20,80,20,180,240,180,240,80,",href:"/l2m4m1"}],markdownText:"**总览**\n\n- 执行日志\n\n> 写入以及需要时执行日志内容的恢复。\n\n- 输入：\n\n> 来自各个模块的写日志信息，需要恢复的请求。\n\n- 日志数据结构：\n\n```C\n    typedef struct XLogRecord\n    {\n        uint32      xl_tot_len;     /* 日志长度 */\n        TransactionId xl_xid;       /* 事务ID */\n        XLogRecPtr  xl_prev;        /* 指向上一条日志 */\n        uint8       xl_info;        /* flag bits, see below */\n        RmgrId      xl_rmid;        /* 日志记录对应的资源管理器 */\n        pg_crc32c   xl_crc;         /* CRC for this record */\n        /* 跟随有 XLogRecordBlockHeaders 和 XLogRecordDataHeader */\n    } XLogRecord;\n```\n      ",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Nl=(0,r.A)(Il,[["render",Xl],["__scopeId","data-v-d2f1c2b0"]]);var Rl=Nl;const $l=e=>((0,l.Qi)("data-v-655c0a96"),e=e(),(0,l.jt)(),e),Ol={class:"common-layout"},Dl=$l((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Bl={class:"header-content"},Wl=(0,l.eW)("Back"),Ql=$l((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M3(锁管理器)",-1))),jl=$l((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),zl={class:"image-container"},Ul=["src"],Vl={name:"image-map",id:"image-map"},ql=["shape","coords","href","onClick","onMouseover","onMouseout"],Kl=$l((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Gl=(0,l.eW)("Next step"),Jl=["innerHTML"],Yl={key:0,class:"rounded-box"},Zl=$l((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),eo=[Zl];function to(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Ol,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Dl,(0,l.Lk)("div",Bl,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Wl])),_:1},8,["onClick"]),Ql]),jl])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",zl,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Ul),(0,l.Lk)("map",Vl,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ql)))),128))])]),Kl,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Gl])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Jl),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Yl,eo)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var no={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M3.png",hotspots:[{id:"1",shape:"poly",coords:"20,50,220,50,220,150,20,150",href:"/l2m2m4"},{id:"2",shape:"poly",coords:"80,250,300,250,300,350,80,350",href:"/l1m3"}],markdownText:"接受各个模块的获取、释放锁请求。\n\n以下是执行不同sql指令时对应锁模块需要调用的函数：\n![img](/pictures/level2/lock.png)\n            ",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ao=(0,r.A)(no,[["render",to],["__scopeId","data-v-655c0a96"]]);var lo=ao;const oo={class:"common-layout"},so={class:"header-content"},io=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L3")],-1),ro=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"现在位于    第 3 层",-1),co=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),po=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),mo=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1),uo=(0,l.Lk)("a",{href:"/l2m2m3",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划模块",-1),ho=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M1")],-1),go=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"预处理模块",-1),ko={class:"content-wrapper"},fo={class:"image-container"},bo=["src"],vo={name:"image-map",id:"image-map"},Lo=["shape","coords","href","onClick","onMouseover","onMouseout"],yo={class:"steps-button-container"},xo=(0,l.eW)(" Next step "),Fo={class:"markdown-container"},Co=["innerHTML"],_o={key:0,class:"rounded-box"},To=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Mo=[To];function So(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",oo,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",so,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[io])),default:(0,l.k6)((()=>[ro])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[co])),default:(0,l.k6)((()=>[po])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[mo])),default:(0,l.k6)((()=>[uo])),_:1}),(0,l.bF)(r,{name:"fourth"},{label:(0,l.k6)((()=>[ho])),default:(0,l.k6)((()=>[go])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",ko,[(0,l.Lk)("div",fo,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,bo),(0,l.Lk)("map",vo,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Lo)))),128))]),(0,l.Lk)("div",yo,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[xo])),_:1},8,["onClick"])])]),(0,l.Lk)("div",Fo,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Co)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",_o,Mo)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var wo={data(){return{activeName:"fourth",active:0,imageSrc:"/pictures/level3/L3M2M3M1.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"**总览**\n\n> 预处理和优化查询，生成规划信息用于路径生成，对应于代数优化\n\n**数据流信息**\n\n- 查询树链表的一个子查询(一棵查询树的一个查询节点，图中省略了for each)\n- 规划信息 `PlannerInfo`\n- 提升子链接与子查询：\n  - 子查询：完整语句，主要出现在FROM中\n  - 子链接：表达式，主要出现在WHERE中\n  - 举例展示此过程：\n    - 原始：`select d.name from dept d where d.deptno in (select e.deptno from emp e where e.sal = 1000);`\n    - 先提升子链接为子查询：`select d.name from dept d (select e.deptno from emp e where e.sal = 1000) as sub where d.deptno = sub.deptno;`\n    - 提升子查询：`select d.name from dept d, emp e where d.deptno = e.deptno and e.sal = 1000;`\n    - 显然，提升完成后比原意执行要高效得多\n- 范围表扫描与优化：遍历查询中的所有 RTE（如表、连接等），并检查是否存在外连接（简单地说，对于连接时不匹配的项，外连接保留，内连接不保留，内连接更省时间）等，进行优化。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})}};const Ao=(0,r.A)(wo,[["render",So]]);var Eo=Ao;const Ho={class:"common-layout"},Po={class:"header-content"},Xo=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L3")],-1),Io=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"现在位于    第 3 层",-1),No=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),Ro=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),$o=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1),Oo=(0,l.Lk)("a",{href:"/l2m2m3",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划模块",-1),Do=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),Bo=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"路径生成模块",-1),Wo={class:"content-wrapper"},Qo={class:"image-container"},jo=["src"],zo={name:"image-map",id:"image-map"},Uo=["shape","coords","href","onClick","onMouseover","onMouseout"],Vo={class:"steps-button-container"},qo=(0,l.eW)(" Next step "),Ko={class:"markdown-container"},Go=["innerHTML"],Jo={key:0,class:"rounded-box"},Yo=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),Zo=[Yo];function es(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Ho,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Po,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[Xo])),default:(0,l.k6)((()=>[Io])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[No])),default:(0,l.k6)((()=>[Ro])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[$o])),default:(0,l.k6)((()=>[Oo])),_:1}),(0,l.bF)(r,{name:"fourth"},{label:(0,l.k6)((()=>[Do])),default:(0,l.k6)((()=>[Bo])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",Wo,[(0,l.Lk)("div",Qo,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,jo),(0,l.Lk)("map",zo,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Uo)))),128))]),(0,l.Lk)("div",Vo,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[qo])),_:1},8,["onClick"])])]),(0,l.Lk)("div",Ko,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Go)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Jo,Zo)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ts={data(){return{activeName:"fourth",active:0,imageSrc:"/pictures/level3/L3M2M3M2.png",hotspots:[{id:"1",shape:"poly",coords:"135,246,341,245,353,245,357,237,360,230,361,134,357,122,350,119,343,115,140,115,131,118,123,127,121,130,121,227,125,239",href:"/l3m2m3m1"},{id:"2",shape:"poly",coords:"560,1726,766,1725,778,1725,782,1717,785,1710,786,1614,782,1602,775,1599,768,1595,565,1595,556,1598,548,1607,546,1610,546,1707,550,1719",href:"/l3m2m3m3"},{id:"3",shape:"poly",coords:"865,1157,1278,1156,1290,1149,1294,1140,1295,1032,1289,1024,1279,1017,861,1017,845,1024,844,1034,845,1141,850,1151,858,1154",href:"/l4m2m3m2m1"}],markdownText:"**总览**\n\n> 生成最优路径和候选路径\n\n**数据流信息**\n\n- 规划信息PlannerInfo\n- 带有路径信息RelOptInfo的规划信息 \n\n> - 集合：指交并差INTERSECT/UNION/MINUS，是这些操作则需要使用集合规划器进行规划\n\n> - 路径键：查询结果的排序顺序。主要作用是帮助优化器确定查询计划中各个步骤的输出是否已经排序，以及排序的顺序是什么\n\n> - 初步路径规划：只考虑如何扫描以及如何连接等基础操作，会生成所有可行路径，其中最优路径带有cheapest标签。物理优化集中于此处。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})}};const ns=(0,r.A)(ts,[["render",es]]);var as=ns;const ls=e=>((0,l.Qi)("data-v-63063371"),e=e(),(0,l.jt)(),e),os={class:"common-layout"},ss={class:"header-content"},is=ls((()=>(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L3")],-1))),rs=ls((()=>(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"现在位于    第 3 层",-1))),cs=ls((()=>(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1))),ps=ls((()=>(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1))),ds=ls((()=>(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1))),ms=ls((()=>(0,l.Lk)("a",{href:"/l2m2m3",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划模块",-1))),us=ls((()=>(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1))),hs=ls((()=>(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"计划生成模块",-1))),gs={class:"content-wrapper"},ks={class:"image-container"},fs=["src"],bs={name:"image-map",id:"image-map"},vs=["shape","coords","href","onClick","onMouseover","onMouseout"],Ls={class:"steps-button-container"},ys=(0,l.eW)(" Next step "),xs={class:"markdown-container"},Fs=["innerHTML"],Cs={key:0,class:"rounded-box"},_s=ls((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Ts=[_s];function Ms(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",os,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",ss,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:e.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[is])),default:(0,l.k6)((()=>[rs])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[cs])),default:(0,l.k6)((()=>[ps])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[ds])),default:(0,l.k6)((()=>[ms])),_:1}),(0,l.bF)(r,{name:"fourth"},{label:(0,l.k6)((()=>[us])),default:(0,l.k6)((()=>[hs])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",gs,[(0,l.Lk)("div",ks,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,fs),(0,l.Lk)("map",bs,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,vs)))),128))]),(0,l.Lk)("div",Ls,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[ys])),_:1},8,["onClick"])])]),(0,l.Lk)("div",xs,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Fs)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Cs,Ts)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ss={data(){return{activeName:"fourth",active:0,imageSrc:"/pictures/level3/L3M2M3M3.png",hotspots:[{id:"1",shape:"poly",coords:"82,215,292,217,303,211,307,200,309,191,307,103,305,93,296,85,82,85,72,94,69,101,70,198,73,208",href:"/l3m2m3m2"},{id:"2",shape:"poly",coords:"1414,958,1625,958,1636,953,1639,948,1640,939,1640,837,1635,830,1629,823,1624,820,1417,819,1410,820,1404,828,1397,838,1398,940,1406,951",href:"/l2m2m4"}],markdownText:"**总览**\n\n> 从路径生成计划\n\n**数据流信息**\n\n- 路径信息以及规划信息(Path 从规划信息中得出)\n- 计划语句`PlannedStmt`（内含计划树`Plan*`）构成的计划树链表\n\n简单来讲其实是一个逐层打包的过程\n\n- **路径（Path）**\n  - 在路径中，主要包含访问方法、成本估算、连接类型等信息。\n  - 路径不包含执行逻辑或操作步骤。\n- **计划树（Plan）**\n  - 在计划树中，添加了执行逻辑、操作步骤、输入输出关系等。\n  - 每个计划节点不仅包含操作类型，还包含执行该操作所需的参数和状态信息。\n- **计划语句(PlannedStmt)**\n  - 打包了额外的上下文信息，如查询的类型（`commandType`）、是否有返回值（`hasReturning`）、是否涉及角色依赖（`dependsOnRole`）等。\n  - 包含了查询的结果关系、子查询计划、游标处理信息等\n\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0,highlight:!1})}};const ws=(0,r.A)(Ss,[["render",Ms],["__scopeId","data-v-63063371"]]);var As=ws;const Es=e=>((0,l.Qi)("data-v-446fcc56"),e=e(),(0,l.jt)(),e),Hs={class:"common-layout"},Ps=Es((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Xs={class:"header-content"},Is=(0,l.eW)("Back"),Ns=Es((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M1",-1))),Rs=Es((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),$s={class:"image-container"},Os=["src"],Ds={name:"image-map",id:"image-map"},Bs=["shape","coords","href","onClick","onMouseover","onMouseout"],Ws=Es((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Qs=(0,l.eW)("Next step"),js=["innerHTML"],zs={key:0,class:"rounded-box"},Us=Es((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Vs=[Us];function qs(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Hs,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ps,(0,l.Lk)("div",Xs,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Is])),_:1},8,["onClick"]),Ns]),Rs])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",$s,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Os),(0,l.Lk)("map",Ds,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Bs)))),128))])]),Ws,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Qs])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,js),s.active>=1?((0,l.uX)(),(0,l.CE)("div",zs,Vs)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ks={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M1.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"整个插入流程由若干个函数组成；\n- btinsert。这是插入索引元组的顶层函数，负责执行整个插入过程。\n- bt_myscankey。该函数负责创建扫描键(BTScanKey结构体)。在构建扫描键的过程中会给每个索引属性列一个比较函数，这个比较函数就是定义某种类型的属性的值应该如何进行比较（比如：定义字符串类型的属性值按照字典序来进行比较等）。\n- index_getattr。这个宏函数负责取出元组的和索引有关的属性值来将它们赋给扫描键中的属性，以便后面用扫描键去和索引树上的索引元组做比较。\n- _bt_search。该函数在b树上进行遍历搜索，以找到在保持b树的有序的性质下刚才构建出来的扫描键应该插入到的目标页面节点。\n- _bt_getroot。该函数负责取b树的根节点。\n- _bt_moveright。该函数负责达到遍历过程中在b树层内右移的效果。\n- _bt_compare。如前文所述，进行属性的比较。\n- _bt_binsrch。该函数负责在页内二分搜索。\n- _BTreeTupleGetDownLink。该函数负责遍历过程中b树内下降一层的效果。\n- _bt_findinsertloc。该函数负责确定目标页面内部应该插在的具体偏移号。由于b树节点页面中的若干个索引元组是有序排列的，因此为了追求更高的查找效率，这个过程通过二分查找这一常见算法实现。\n- _bt_insertonpg。该函数会在上面找到的具体插入位置处，执行将待插入的索引元组加入到目标位置的操作。这个函数其实就是调用了名为PageAddItem的宏函数（这个函数在本报告中也是做了详细解释了的），其将待插入的索引元组的内容memcpy到页面的对应位置上，同时维护页面PageHeaderData结构中的linp数组，将新插入索引元组的ItemIdData结构插入到linp数组对应的位置上，完成插入元组的操作。\n- _bt_split。如果_bt_findinsertloc没有发现空余空间，那么_bt_insertonpg函数会调用该函数，触发页面分裂。\n- _bt_insert_parent。该函数将指向分裂后的右页面的索引元组插入到父页面中，维护好父子之间的指针，彻底完成分裂。"}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const Gs=(0,r.A)(Ks,[["render",qs],["__scopeId","data-v-446fcc56"]]);var Js=Gs;const Ys=e=>((0,l.Qi)("data-v-4517fb0a"),e=e(),(0,l.jt)(),e),Zs={class:"common-layout"},ei=Ys((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ti={class:"header-content"},ni=(0,l.eW)("Back"),ai=Ys((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M2",-1))),li=Ys((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),oi={class:"image-container"},si=["src"],ii={name:"image-map",id:"image-map"},ri=["shape","coords","href","onClick","onMouseover","onMouseout"],ci=Ys((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),pi=(0,l.eW)("Next step"),di=["innerHTML"],mi={key:0,class:"rounded-box"},ui=Ys((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),hi=[ui];function gi(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Zs,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[ei,(0,l.Lk)("div",ti,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ni])),_:1},8,["onClick"]),ai]),li])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",oi,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,si),(0,l.Lk)("map",ii,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ri)))),128))])]),ci,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[pi])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,di),s.active>=1?((0,l.uX)(),(0,l.CE)("div",mi,hi)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ki={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M2.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"索引查询的顶层函数为index_get_next_tid。该函数作用为返回B树上下一个符合查询条件的索引元组。具体逻辑如下：\n- 调用btgettuple函数，开始主干逻辑的执行。\n- 若btgettuple函数第一次被调用，则执行_bt_first函数。_bt_first函数首先依据查询条件构建扫描键，遍历b树，拿这个扫描键来不断和树上索引元组的键值进行比较，从而决定是要往什么样的方向（向右移还是向下移）去向目标页面靠近。_bt_search负责找到目标页面，而_bt_binsrch函数会在目标页面内二分查找，找到目标页面内符合查询条件的第一个索引元组的偏移offnum。在之后，_bt_first会调用_bt_readpage函数从上一步得到的第一个位置开始往后遍历，将当前页面后面的所有符合查询条件的索引元组全部保存下来，并记录当前的偏移量为0。\n- 若btgettuple函数不是头一次调用，则直接将上一步中的存储的索引元组的偏移量+1， 即可直接获取到下一个符合条件的索引元组。"}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const fi=(0,r.A)(ki,[["render",gi],["__scopeId","data-v-4517fb0a"]]);var bi=fi;const vi=e=>((0,l.Qi)("data-v-5f813084"),e=e(),(0,l.jt)(),e),Li={class:"common-layout"},yi=vi((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),xi={class:"header-content"},Fi=(0,l.eW)("Back"),Ci=vi((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M3",-1))),_i=vi((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ti={class:"image-container"},Mi=["src"],Si={name:"image-map",id:"image-map"},wi=["shape","coords","href","onClick","onMouseover","onMouseout"],Ai=vi((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Ei=(0,l.eW)("Next step"),Hi=["innerHTML"],Pi={key:0,class:"rounded-box"},Xi=vi((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Ii=[Xi];function Ni(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Li,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[yi,(0,l.Lk)("div",xi,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Fi])),_:1},8,["onClick"]),Ci]),_i])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ti,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Mi),(0,l.Lk)("map",Si,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,wi)))),128))])]),Ai,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Ei])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Hi),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Pi,Ii)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ri={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M3.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"完成b索引树创建任务的顶层函数是btbuild。该函数流程为：\n- 在btbuild函数内部，首先执行_bt_spools_heapscan函数来扫描一个个的表元组然后把他们封装成一个个索引元组的数据结构(IndexTuple)。\n- 然后btbuild内部再调用_bt_leafbuild函数，并于其中调用tuplesort_performsort函数按照索引键值对索引元组进行排序为之后将他们一个个插入索引树上做准备。\n- 接着在_bt_leafbuild函数中循环调用_bt_load函数。_bt_load函数能将单个索引元组插入到树上对应的位置，那么循环调用这个函数就可以将所有的索引元组都插入到树上了。"}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const $i=(0,r.A)(Ri,[["render",Ni],["__scopeId","data-v-5f813084"]]);var Oi=$i;const Di=e=>((0,l.Qi)("data-v-7d0e0857"),e=e(),(0,l.jt)(),e),Bi={class:"common-layout"},Wi=Di((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Qi={class:"header-content"},ji=(0,l.eW)("Back"),zi=Di((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M4M1M1(开启事务模块)",-1))),Ui=Di((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Vi={class:"image-container"},qi=["src"],Ki={name:"image-map",id:"image-map"},Gi=["shape","coords","href","onClick","onMouseover","onMouseout"],Ji=Di((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Yi=(0,l.eW)("Next step"),Zi=["innerHTML"],er={key:0,class:"rounded-box"},tr=Di((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),nr=[tr];function ar(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Bi,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Wi,(0,l.Lk)("div",Qi,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ji])),_:1},8,["onClick"]),zi]),Ui])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Vi,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,qi),(0,l.Lk)("map",Ki,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Gi)))),128))])]),Ji,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Yi])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Zi),s.active>=1?((0,l.uX)(),(0,l.CE)("div",er,nr)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var lr={data(){return{active:0,imageSrc:"/pictures/level3/L3M4M1M1.png",hotspots:[{id:"1",shape:"poly",coords:"20,35,220,35,220,150,20,150,",href:"/l2m2m4"},{id:"2",shape:"poly",coords:"1050,230,1250,230,1250,340,1050,340,",href:"/l2m4m3"}],markdownText:"说明信息：\n\n在遇到一条新的事物指令时，会开启一个新事务，进行事务模块与锁等的初始化。\ninput：来自编译执行模块对于开启事务指令的调用。\n\n`vxid`为虚拟事务编号，用来进行事务的虚拟标识。\n```C\nstruct {\n    ProcNumber  procNumber;\n    LocalTransactionId lxid;\n} vxid;\n```\n",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const or=(0,r.A)(lr,[["render",ar],["__scopeId","data-v-7d0e0857"]]);var sr=or;const ir=e=>((0,l.Qi)("data-v-7504d9ee"),e=e(),(0,l.jt)(),e),rr={class:"common-layout"},cr=ir((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),pr={class:"header-content"},dr=(0,l.eW)("Back"),mr=ir((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M4M1M2(提交事务模块)",-1))),ur=ir((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),hr={class:"image-container"},gr=["src"],kr={name:"image-map",id:"image-map"},fr=["shape","coords","href","onClick","onMouseover","onMouseout"],br=ir((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),vr=(0,l.eW)("Next step"),Lr=["innerHTML"],yr={key:0,class:"rounded-box"},xr=ir((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Fr=[xr];function Cr(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",rr,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[cr,(0,l.Lk)("div",pr,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[dr])),_:1},8,["onClick"]),mr]),ur])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",hr,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,gr),(0,l.Lk)("map",kr,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,fr)))),128))])]),br,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[vr])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Lr),s.active>=1?((0,l.uX)(),(0,l.CE)("div",yr,Fr)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var _r={data(){return{active:0,imageSrc:"/pictures/level3/L3M4M1M2.png",hotspots:[{id:"1",shape:"poly",coords:"800,150,970,150,970,250,800,250,",href:"/l4m4m1m2m1"},{id:"2",shape:"poly",coords:"1100,150,1270,150,1270,250,1100,250,",href:"/l2m4m3"},{id:"3",shape:"poly",coords:"750,450,920,450,920,550,750,550,",href:"/l2m4m2"},{id:"4",shape:"poly",coords:"20,20,200,20,200,120,20,120,",href:"/l2m2m4"}],markdownText:"说明信息：\n\n在遇到Commit指令时，会根据当前状态决定是否进行两阶段提交（2PC），并填写日志，释放锁，复位信息等功能。\n\nInput：来自编译执行模块的Commit指令执行时的调用。",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Tr=(0,r.A)(_r,[["render",Cr],["__scopeId","data-v-7504d9ee"]]);var Mr=Tr;const Sr=e=>((0,l.Qi)("data-v-4b36fae4"),e=e(),(0,l.jt)(),e),wr={class:"common-layout"},Ar=Sr((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Er={class:"header-content"},Hr=(0,l.eW)("Back"),Pr=Sr((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M4M2M1(日志恢复模块)",-1))),Xr=Sr((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ir={class:"image-container"},Nr=["src"],Rr={name:"image-map",id:"image-map"},$r=["shape","coords","href","onClick","onMouseover","onMouseout"],Or=Sr((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Dr=(0,l.eW)("Next step"),Br=["innerHTML"],Wr={key:0,class:"rounded-box"},Qr=Sr((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),jr=[Qr];function zr(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",wr,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ar,(0,l.Lk)("div",Er,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Hr])),_:1},8,["onClick"]),Pr]),Xr])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ir,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Nr),(0,l.Lk)("map",Rr,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,$r)))),128))])]),Or,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Dr])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Br),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Wr,jr)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ur={data(){return{active:0,imageSrc:"/pictures/level3/L3M4M2M1.png",hotspots:[{id:"1",shape:"poly",coords:"480,510,720,510,720,640,480,640",href:"/l1m3"}],markdownText:"说明信息：\n\n日志进行崩溃恢复时，将会首先调用位于`xlog.c`中的`StartupXLog`函数。`StartupXLog()` 是启动过程的主要入口点，该函数会在`postmaster`或独立后端启动期间被调用。它协调数据库的启动，执行WAL恢复，并从WAL恢复过渡到正常操作。",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Vr=(0,r.A)(Ur,[["render",zr],["__scopeId","data-v-4b36fae4"]]);var qr=Vr;const Kr={class:"common-layout"},Gr={class:"header-content"},Jr=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"L4")],-1),Yr=(0,l.Lk)("a",{href:"/",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"现在位于    第 4 层",-1),Zr=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),ec=(0,l.Lk)("a",{href:"/l1m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询模块",-1),tc=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M3")],-1),nc=(0,l.Lk)("a",{href:"/l2m2m3",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划模块",-1),ac=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M2")],-1),lc=(0,l.Lk)("a",{href:"/l3m2m3m2",target:"_self",style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"查询规划——路径生成",-1),oc=(0,l.Lk)("span",{class:"custom-tabs-label"},[(0,l.Lk)("span",null,"M1")],-1),sc=(0,l.Lk)("a",{style:{"text-decoration":"none",color:"#ffffff","font-size":"32px","font-weight":"600"}},"初步路径规划 ",-1),ic={class:"content-wrapper"},rc={class:"image-container"},cc=["src"],pc={name:"image-map",id:"image-map"},dc=["shape","coords","href","onClick","onMouseover","onMouseout"],mc={class:"steps-button-container"},uc=(0,l.eW)(" Next step "),hc={class:"markdown-container"},gc=["innerHTML"],kc={key:0,class:"rounded-box"},fc=(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1),bc=[fc];function vc(e,t,n,o,s,i){const r=(0,l.g2)("el-tab-pane"),c=(0,l.g2)("el-tabs"),p=(0,l.g2)("el-header"),d=(0,l.g2)("el-step"),m=(0,l.g2)("el-steps"),u=(0,l.g2)("el-button"),h=(0,l.g2)("el-main"),g=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Kr,[(0,l.bF)(g,null,{default:(0,l.k6)((()=>[(0,l.bF)(p,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Gr,[(0,l.bF)(c,{modelValue:s.activeName,"onUpdate:modelValue":t[0]||(t[0]=e=>s.activeName=e),class:"demo-tabs",onTabClick:i.handleClick},{default:(0,l.k6)((()=>[(0,l.bF)(r,{name:"first"},{label:(0,l.k6)((()=>[Jr])),default:(0,l.k6)((()=>[Yr])),_:1}),(0,l.bF)(r,{name:"second"},{label:(0,l.k6)((()=>[Zr])),default:(0,l.k6)((()=>[ec])),_:1}),(0,l.bF)(r,{name:"third"},{label:(0,l.k6)((()=>[tc])),default:(0,l.k6)((()=>[nc])),_:1}),(0,l.bF)(r,{name:"fourth"},{label:(0,l.k6)((()=>[ac])),default:(0,l.k6)((()=>[lc])),_:1}),(0,l.bF)(r,{name:"fifth"},{label:(0,l.k6)((()=>[oc])),default:(0,l.k6)((()=>[sc])),_:1})])),_:1},8,["modelValue","onTabClick"])])])),_:1}),(0,l.bF)(h,{style:{padding:"20px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",ic,[(0,l.Lk)("div",rc,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,cc),(0,l.Lk)("map",pc,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,dc)))),128))]),(0,l.Lk)("div",mc,[(0,l.bF)(m,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(d,{title:"Step 1"}),(0,l.bF)(d,{title:"Step 2"}),(0,l.bF)(d,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(u,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[uc])),_:1},8,["onClick"])])]),(0,l.Lk)("div",hc,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,gc)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",kc,bc)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Lc={data(){return{activeName:"fifth",active:0,imageSrc:"/pictures/level4/L4M2M3M2M1.png",hotspots:[],markdownText:"**总览**\n\n> 初步规划路径\n\n**数据流信息**\n\n- PlannerInfo规划信息\n- 加入了路径信息的PlannerInfo\n\n> - 基础关系集合是不需要连接的集合，也即先确定有哪些表参与，PG选择用位图表示\n\n> - 基础关系的访问路径指访问该节点的一个Path元，其中记录着Cost与访问方法（如顺序扫描等）\n\n> - 后续连接依靠这些Path元不断合并\n\n> - 在连接时有三种算法可供选择：动态规划，遗传算法，以及为扩展留出的一个hook\n\n**算法解析**\n\n1. 动态规划\n   ![img](/pictures/level4/dp.png)\n\n   1.  此动态规划逐层建立连接路径\n\n   2. Level表示已经连接的表数\n   3. Bushy Plan会构建起更多样的连接顺序\n   4. 分区表：有些表因为大小等原因切割后存储，成为分区表，故而此处要进行针对其的优化\n   5. 并行优化指通过gather操作等进行性能优化\n2. 遗传算法\n   ![img](/pictures/level4/hp.png)\n\n   在此遗传算法中\n\n   1. 基本概念介绍\n      - 基因Gene：一个基因代表一个基础关系，用整数表示\n      - 染色体Chromosome：\n      - ```C\n        typedef struct Chromosome\n        {\n           Gene     *string;  // 由Gene构成的有序表示\n           Cost     worth;    // 染色体的适应度\n        } Chromosome;\n        ```\n\n      - 种群Pool：多个染色体形成，代码中为Pool\n      - ```C\n        typedef struct Pool {     \n            Chromosome *data;     \n            int size;             // 种群大小\n            int string_length;    // 基因（基础关系）数量 \n        } Pool;\n        ```\n   2. 关键步骤解析\n      - 初始化：使用`gimme_pool_size()` 和 `gimme_number_generations()` 计算种群的大小和代数\n      - 交叉：通过指定的算子生成子代的染色体（查询顺序），例如momma [1,2,3,4] , daddy [2,4,1,3] 生成 [1, 2, 4, 3]\n      - 变异：如随机交换基因顺序\n      - 评估子代适应度：通过代价函数计算该染色体（查询顺序）代价\n      - 推送子代：将子代按适应度加入到Pool的合适位置，会挤出Pool中最差者\n      - 停止条件： 达到初始化时计算的代数\n      - 注：交叉与变异均因算子而异\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{handleClick(e,t){console.log(e,t)},next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const yc=(0,r.A)(Lc,[["render",vc]]);var xc=yc;const Fc=e=>((0,l.Qi)("data-v-7dad73eb"),e=e(),(0,l.jt)(),e),Cc={class:"common-layout"},_c=Fc((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Tc={class:"header-content"},Mc=(0,l.eW)("Back"),Sc=Fc((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L4M4M1M2M1(两阶段提交模块)",-1))),wc=Fc((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ac={class:"image-container"},Ec=["src"],Hc={name:"image-map",id:"image-map"},Pc=["shape","coords","href","onClick","onMouseover","onMouseout"],Xc=Fc((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Ic=(0,l.eW)("Next step"),Nc=["innerHTML"],Rc={key:0,class:"rounded-box"},$c=Fc((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Oc=[$c];function Dc(e,t,n,o,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),m=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Cc,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[_c,(0,l.Lk)("div",Tc,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Mc])),_:1},8,["onClick"]),Sc]),wc])),_:1}),(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ac,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Ec),(0,l.Lk)("map",Hc,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,a.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Pc)))),128))])]),Xc,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Ic])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Nc),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Rc,Oc)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Bc={data(){return{active:0,imageSrc:"/pictures/level4/L4M4M1M2M1.png",hotspots:[{id:"1",shape:"poly",coords:"1100,200,1100,300,1260,300,1260,200,",href:"/l2m4m3"},{id:"2",shape:"poly",coords:"600,380,600,450,770,450,770,380,",href:"/l2m4m2"}],markdownText:"说明信息：\n\n根据当前状态判断进行两阶段提交。\n\n2PC相关的逻辑结构均建立在底层存储的基础上，会调用底层存储的相应方法。在共享内存中保存着`TwoPhaseStateData`结构体。`TwoPhaseData`结构体包含一个全局空闲事务链表头指针`freeGXacts`，已准备的事务数量（也即有效表项数）`numPrepXacts`和存储全局事务的数组`prepXacts`。其平铺示意图如右小图。而`TwoPhaseData`会写入`TwoPhaseFile`磁盘文件持久化，在操作过程中写入日志文件。",md:new E.A({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Wc=(0,r.A)(Bc,[["render",Dc],["__scopeId","data-v-7dad73eb"]]);var Qc=Wc;const jc=[{path:"/",component:X},{path:"/l1m1",component:le},{path:"/l1m2",component:Te},{path:"/l1m3",component:ut},{path:"/l1m4",component:Ve},{path:"/l2m2m1",component:Rt},{path:"/l2m2m2",component:rn},{path:"/l2m2m3",component:Hn},{path:"/l2m2m4",component:na},{path:"/l2m3m1",component:xa},{path:"/l2m3m2",component:Ua},{path:"/l2m3m3",component:Ka},{path:"/l2m4m1",component:kl},{path:"/l2m4m2",component:Rl},{path:"/l2m4m3",component:lo},{path:"/l3m2m3m1",component:Eo},{path:"/l3m2m3m2",component:as},{path:"/l3m2m3m3",component:As},{path:"/l3m3m1m1",component:Js},{path:"/l3m3m1m2",component:bi},{path:"/l3m3m1m3",component:Oi},{path:"/l3m4m1m1",component:sr},{path:"/l3m4m1m2",component:Mr},{path:"/l3m4m2m1",component:qr},{path:"/l4m2m3m2m1",component:xc},{path:"/l4m4m1m2m1",component:Qc},{path:"/next-level/:id",component:O}],zc=(0,m.aE)({history:(0,m.LA)("/"),routes:jc});var Uc=zc,Vc=n(1109);n(3662);const qc=new E.A({html:!0,highlight:(e,t)=>t&&Vc.A.getLanguage(t)?`<pre class="hljs"><code>${Vc.A.highlight(e,{language:t}).value}</code></pre>`:`<pre class="hljs"><code>${(void 0).utils.escapeHtml(e)}</code></pre>`});var Kc=qc;const Gc=(0,a.Ef)(p);Gc.use(d.A),Gc.use(Uc),Gc.config.globalProperties.$md=Kc,Gc.mount("#app")}},t={};function n(a){var l=t[a];if(void 0!==l)return l.exports;var o=t[a]={exports:{}};return e[a].call(o.exports,o,o.exports,n),o.exports}n.m=e,function(){var e=[];n.O=function(t,a,l,o){if(!a){var s=1/0;for(p=0;p<e.length;p++){a=e[p][0],l=e[p][1],o=e[p][2];for(var i=!0,r=0;r<a.length;r++)(!1&o||s>=o)&&Object.keys(n.O).every((function(e){return n.O[e](a[r])}))?a.splice(r--,1):(i=!1,o<s&&(s=o));if(i){e.splice(p--,1);var c=l();void 0!==c&&(t=c)}}return t}o=o||0;for(var p=e.length;p>0&&e[p-1][2]>o;p--)e[p]=e[p-1];e[p]=[a,l,o]}}(),function(){n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,{a:t}),t}}(),function(){n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}}(),function(){n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){var e={524:0};n.O.j=function(t){return 0===e[t]};var t=function(t,a){var l,o,s=a[0],i=a[1],r=a[2],c=0;if(s.some((function(t){return 0!==e[t]}))){for(l in i)n.o(i,l)&&(n.m[l]=i[l]);if(r)var p=r(n)}for(t&&t(a);c<s.length;c++)o=s[c],n.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return n.O(p)},a=self["webpackChunkdata_flow_diagram"]=self["webpackChunkdata_flow_diagram"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))}();var a=n.O(void 0,[504],(function(){return n(46)}));a=n.O(a)})();
//# sourceMappingURL=app.16b9b487.js.map