(function(){"use strict";var e={8099:function(e,t,n){var o=n(5688),l=n(6768);const a={id:"app"};function s(e,t,n,o,s,i){const r=(0,l.g2)("router-view");return(0,l.uX)(),(0,l.CE)("div",a,[(0,l.bF)(r)])}var i={name:"App"},r=n(1241);const c=(0,r.A)(i,[["render",s]]);var p=c,d=n(2523),u=(n(4188),n(1387));const m=e=>((0,l.Qi)("data-v-79cd40bb"),e=e(),(0,l.jt)(),e),h={class:"common-layout"},g=m((()=>(0,l.Lk)("div",{class:"header-content"},[(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L0(系统总体结构)")],-1))),k={class:"content-wrapper"},f={class:"image-container"},v=["src"],b={name:"image-map",id:"image-map"},y=["shape","coords","href","onClick","onMouseover","onMouseout"],L={class:"steps-button-container"},x=(0,l.eW)(" Next step "),F={class:"markdown-container"},C=["innerHTML"],_={key:0,class:"rounded-box"},T=m((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),M=[T];function S(e,t,n,a,s,i){const r=(0,l.g2)("el-header"),c=(0,l.g2)("el-step"),p=(0,l.g2)("el-steps"),d=(0,l.g2)("el-button"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",h,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(r,{style:{"padding-left":"10px"}},{default:(0,l.k6)((()=>[g])),_:1}),(0,l.bF)(u,{style:{padding:"10px"}},{default:(0,l.k6)((()=>[(0,l.Lk)("div",k,[(0,l.Lk)("div",f,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",class:"image"},null,8,v),(0,l.Lk)("map",b,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,y)))),128))]),(0,l.Lk)("div",L,[(0,l.bF)(p,{active:s.active,"finish-status":"success","align-center":"",style:{width:"100%"}},{default:(0,l.k6)((()=>[(0,l.bF)(c,{title:"Step 1"}),(0,l.bF)(c,{title:"Step 2"}),(0,l.bF)(c,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(d,{class:"next-button",style:{"margin-top":"20px"},onClick:i.next},{default:(0,l.k6)((()=>[x])),_:1},8,["onClick"])])]),(0,l.Lk)("div",F,[(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,C)])]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",_,M)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}n(4114);var E=n(6587),A=n.n(E),w=(n(765),n(1451)),P=n.n(w),H={data(){return{active:0,imageSrc:"/pictures/level0/L0.png",hotspots:[{id:"4",shape:"poly",coords:"74,455,382,455,398,451,401,441,406,439,406,427,408,413,408,298,403,288,398,282,393,277,384,275,75,274,65,275,56,279,51,285,47,292,46,429,49,439,58,449,66,454",href:"/l1m1"},{id:"1",shape:"poly",coords:"75,844,383,844,399,840,402,830,407,828,407,816,409,802,409,687,404,677,399,671,394,666,385,664,76,663,66,664,57,668,52,674,48,681,47,818,50,828,59,838,67,843",href:"/l1m2"},{id:"2",shape:"poly",coords:"74,1230,382,1230,398,1226,401,1216,406,1214,406,1202,408,1188,408,1073,403,1063,398,1057,393,1052,384,1050,75,1049,65,1050,56,1054,51,1060,47,1067,46,1204,49,1214,58,1224,66,1229",href:"/l1m5"},{id:"3",shape:"poly",coords:"948,841,1256,841,1272,837,1275,827,1280,825,1280,813,1282,799,1282,684,1277,674,1272,668,1267,663,1258,661,949,660,939,661,930,665,925,671,921,678,920,815,923,825,932,835,940,840",href:"/l1m4"}],markdownText:"**流程图**\n  \n  ![img](https://s21.ax1x.com/2024/12/06/pA79Al6.png)\n  \n  **总览**\n  \n  > PostgreSQL 数据库是一种几乎可以运行在各种平台上的免费开源对象关系数据库，它是一种以关系型数据库和 SQL 为基础，扩展了抽象数据类型，从而具备面向对象特性的数据库。PostgreSQL 数据库主要由连接模块、查询模块、存储模块、事务模块四部分组成。\n  \n  **模块信息**\n  \n  - 连接模块\n      \n      > 接受外部操作对系统的请求，对操作请求进行预处理和分发，起系统逻辑控制作用。\n  \n  - 查询模块\n  \n      > 完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作。\n  \n  - 事务模块：\n  \n      > 负责存储和管理物理数据，提供对编译查询系统的支持。\n  \n  - 存储模块：\n  \n      > 完成对操作请求处理的事务一致性支持，提供对并发访问数据的一致性支持。\n  \n  **数据流信息**\n  \n  - 日志\n  \n      > 写日志信息，日志恢复请求，如ereport。\n  \n  - 锁请求\n  \n      > 获取、释放锁请求。\n  \n  - 事务指令\n  \n      > 调用事务模块相关处理函数，如BeginTransactionBlock、RequireTransactionBlock、RollbackToSavepoint等。\n  \n  - 内存指令\n      \n      > 调用的内存模块相关处理函数，如AlterTable、DefineIndex、RemoveRelations等。\n              ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const I=(0,r.A)(H,[["render",S],["__scopeId","data-v-79cd40bb"]]);var X=I,R=n(5187);function B(e,t,n,o,a,s){return(0,l.uX)(),(0,l.CE)("div",null,[(0,l.Lk)("h1",null,"下一层数据流图：节点 "+(0,R.v_)(e.$route.params.id),1),(0,l.Lk)("p",null,"这里是节点 "+(0,R.v_)(e.$route.params.id)+" 的详细信息。",1)])}var O={name:"NextLevelPage"};const Q=(0,r.A)(O,[["render",B]]);var $=Q;const N=e=>((0,l.Qi)("data-v-7eae04bc"),e=e(),(0,l.jt)(),e),W={class:"common-layout"},D=N((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),j={class:"header-content"},q=(0,l.eW)("Back"),U=N((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M1",-1))),K=N((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),z={class:"image-container"},G=["src"],J=N((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),V=(0,l.eW)("Next step"),Y=["innerHTML"],Z={key:0,class:"rounded-box"},ee=N((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),te=[ee];function ne(e,t,n,o,a,s){const i=(0,l.g2)("el-button"),r=(0,l.g2)("el-header"),c=(0,l.g2)("el-step"),p=(0,l.g2)("el-steps"),d=(0,l.g2)("el-main"),u=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",W,[(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.bF)(r,null,{default:(0,l.k6)((()=>[D,(0,l.Lk)("div",j,[(0,l.bF)(i,{type:"info",onClick:s.goBack,class:"back-button"},{default:(0,l.k6)((()=>[q])),_:1},8,["onClick"]),U]),K])),_:1}),(0,l.bF)(d,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",z,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:a.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,G)]),J,(0,l.bF)(p,{style:{"max-width":"600px"},active:a.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(c,{title:"Step 1"}),(0,l.bF)(c,{title:"Step 2"}),(0,l.bF)(c,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(i,{class:"next-button",style:{"margin-top":"12px"},onClick:s.next},{default:(0,l.k6)((()=>[V])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:s.compiledMarkdown,class:"markdown-body"},null,8,Y),a.active>=1?((0,l.uX)(),(0,l.CE)("div",Z,te)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var oe={data(){return{active:0,imageSrc:"/pictures/level1/L1M1.png",markdownText:"**总览**\n\n>接受外部操作对系统的请求，对操作请求进行预处理和分发，起系统逻辑控制作用。\n\n**模块信息**\n\n- 守护进程postmaster\n    > 多用户模式下一个数据库实例由守护进程 Postmaster 来管理。它是一个运行在服务器上的总控进程，负责整个系统的启动和关闭，并且在服务进程出现错误时完成系统的恢复。它会为客户端连接请求 fork 一个 Postgres 服务进程，来代表客户端在数据库上执行各种命令。\n\n- 服务进程postgres\n    > Postgres进程是实际的接受查询请求并调用相应模块处理查询的服务进程。它直接接受用户的命令进行编译执行，并将结果返回给用户。如此循环，直到用户断开连接。\n\n- ReadCommand\n    ```C++\n    /* ----------------\n     *                ReadCommand 从前端或标准输入读取命令，如果文件结束，\n     *                将其放入 inBuf，并返回信息类型代码（信息的第一个字节）。\n     *                则返回 EOF。\n     * ----------------\n     */\n    static int\n    ReadCommand(StringInfo inBuf)\n    {\n            int                        result;\n\n            if (whereToSendOutput == DestRemote)\n                    result = SocketBackend(inBuf);\n            else\n                    result = InteractiveBackend(inBuf);\n            return result;\n    }\n    ```\n\n**数据流信息**\n\n- 用户命令\n    > 用户命令分为两种：一种是查询命令，即插人、删除、更新和选择四种命令。另一种是非查询命令，如创建/删除表、视图、索引等命令。\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const le=(0,r.A)(oe,[["render",ne],["__scopeId","data-v-7eae04bc"]]);var ae=le;const se=e=>((0,l.Qi)("data-v-27b156d9"),e=e(),(0,l.jt)(),e),ie={class:"common-layout"},re=se((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ce={class:"header-content"},pe=(0,l.eW)("Back"),de=se((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M2(查询模块)",-1))),ue=se((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),me={class:"image-container"},he=["src"],ge={name:"image-map",id:"image-map"},ke=["shape","coords","href","onClick","onMouseover","onMouseout"],fe=se((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),ve=(0,l.eW)("Next step"),be=["innerHTML"],ye={key:0,class:"rounded-box"},Le=se((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),xe=[Le];function Fe(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",ie,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[re,(0,l.Lk)("div",ce,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[pe])),_:1},8,["onClick"]),de]),ue])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",me,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,he),(0,l.Lk)("map",ge,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ke)))),128))])]),fe,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[ve])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,be),s.active>=1?((0,l.uX)(),(0,l.CE)("div",ye,xe)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ce={data(){return{active:0,imageSrc:"/pictures/level1/L1M2.png",hotspots:[{id:"1",shape:"poly",coords:"356,335,357,413,359,422,362,423,365,427,371,429,549,429,555,428,561,425,564,417,566,415,567,338,565,332,561,326,556,325,371,322,363,328,359,327",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"355,559,356,637,358,646,361,647,364,651,370,653,548,653,554,652,560,649,563,641,565,639,566,562,564,556,560,550,555,549,370,546,362,552,358,551",href:"/l2m2m2"},{id:"3",shape:"poly",coords:"882,429,1117,429,1125,427,1131,420,1131,415,1133,408,1133,336,1129,326,1122,322,881,322,872,326,869,333,866,348,868,413,872,422,876,425",href:"/l2m2m3"},{id:"4",shape:"poly",coords:"881,653,1116,653,1124,651,1130,644,1130,639,1132,632,1132,560,1128,550,1121,546,880,546,871,550,868,557,865,572,867,637,871,646,875,649",href:"/l2m2m4"},{id:"5",shape:"poly",coords:"0,796,1,874,3,883,6,884,9,888,15,890,193,890,199,889,205,886,208,878,210,876,211,799,209,793,205,787,200,786,15,783,7,789,3,788",href:"/next-level/4"}],markdownText:"**总览**\n\n> 完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作。\n\n**模块信息**\n\n- 查询分析模块\n    \n    > 进行词法分析、语法分析和语义分析生成查询树，并且判断sql语句类型。 \n\n- 查询重写模块\n    \n    > 根据已定义的规则对查询树进行重写\n\n- 查询规划模块\n    \n    > 根据查询树生成查询计划\n\n- 查询执行模块\n    \n    > 按照查询计划的安排，调用存储、索引、并发等功能模块，按照各个计划节点的实现算法来执行数据的读取和修改。\n\n**数据流信息**\n\n- 存储指令\n    \n    > 查询执行模块执行后向存储模块发出的指令\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const _e=(0,r.A)(Ce,[["render",Fe],["__scopeId","data-v-27b156d9"]]);var Te=_e;const Me=e=>((0,l.Qi)("data-v-7e31bf4a"),e=e(),(0,l.jt)(),e),Se={class:"common-layout"},Ee=Me((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ae={class:"header-content"},we=(0,l.eW)("Back"),Pe=Me((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M3",-1))),He=Me((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ie={class:"image-container"},Xe=["src"],Re={name:"image-map",id:"image-map"},Be=["shape","coords","href","onClick","onMouseover","onMouseout"],Oe=Me((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Qe=(0,l.eW)("Next step"),$e={key:0,class:"rounded-box"},Ne=Me((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),We=[Ne];function De(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Se,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ee,(0,l.Lk)("div",Ae,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[we])),_:1},8,["onClick"]),Pe]),He])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ie,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Xe),(0,l.Lk)("map",Re,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Be)))),128))])]),Oe,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Qe])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",$e,We)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var je={data(){return{active:0,imageSrc:"/pictures/level1/L1M3.png",hotspots:[{id:"1",shape:"poly",coords:"44,78, 44,225, 60,260, 100,275, 680,275, 720,260, 743,225, 743,78, 720,43, 680,28, 100,28, 60,43, 44,78",href:"/l2m2m2"},{id:"5",shape:"poly",coords:"90,528, 325,528, 330,533, 335,538, 335,653, 330,658, 325,663, 90,663, 85,658, 80,653, 80,538, 85,533",href:"/l2m3m1"},{id:"6",shape:"poly",coords:"872,27, 1158,27, 1163,32, 1168,37, 1168,257, 1163,262, 1158,267, 872,267, 867,262, 862,257, 862,37, 867,32, 872,27",href:"/l1m4"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const qe=(0,r.A)(je,[["render",De],["__scopeId","data-v-7e31bf4a"]]);var Ue=qe;const Ke=e=>((0,l.Qi)("data-v-025e3ac2"),e=e(),(0,l.jt)(),e),ze={class:"common-layout"},Ge=Ke((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Je={class:"header-content"},Ve=(0,l.eW)("Back"),Ye=Ke((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M2M1(查询分析模块)",-1))),Ze=Ke((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),et={class:"image-container"},tt=["src"],nt={name:"image-map",id:"image-map"},ot=["shape","coords","href","onClick","onMouseover","onMouseout"],lt=Ke((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),at=(0,l.eW)("Next step"),st=["innerHTML"],it={key:0,class:"rounded-box"},rt=Ke((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ct=[rt];function pt(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",ze,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ge,(0,l.Lk)("div",Je,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Ve])),_:1},8,["onClick"]),Ye]),Ze])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",et,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,tt),(0,l.Lk)("map",nt,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ot)))),128))])]),lt,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[at])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,st),s.active>=1?((0,l.uX)(),(0,l.CE)("div",it,ct)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var dt={data(){return{active:0,imageSrc:"/pictures/level2/L2M2M1.png",hotspots:[{id:"1",shape:"poly",coords:"935,578,936,673,939,683,944,688,953,693,1260,693,1269,688,1275,681,1279,679,1280,575,1274,566,1267,559,953,557,938,564",href:"/l2m2m2"},{id:"1",shape:"poly",coords:"19, 121, 219, 120, 231, 114, 237, 111, 242, 105, 242, 3, 237, -4, 233, -10, 224, -13, 21, -12, 4, -11, -1, 1, -1, 7, 2, 107, 9, 116",href:"/next-level/2"}],markdownText:"**总览**\n\n> 进行词法分析、语法分析和语义分析生成查询树，并且判断sql语句类型。\n\n**数据流信息**\n\n- 查询语句query_string\n    > 用户发送的sql语句字符串\n\n- 分析树parsetree_list\n    > 经过词法分析和语法分析生成的分析树parsetree_list，postgre单独定义了一种结构体List来存放这类数据：\n\n    ```C++\n    typedef union ListCell\n    {\n    void     ptr_value;\n    int     int_value;\n    Oid     oid_value;\n    } ListCell;\n    \n    typedef struct List\n    {\n    *   NodeTag   type;     /* T_List, T_IntList, or T_OidList /\n    *   int     length;     /* number of elements currently present /\n    *   int     max_length;   /* allocated length of elements[] */\n    ListCell   elements;   / re-allocatable array of cells /\n    *   /* We may allocate some cells along with the List header: /\n    ListCell  initial_elements[FLEXIBLE_ARRAY_MEMBER];\n    *   /* If elements == initial_elements, it's not a separate allocation */\n    } List;\n    ```\n\n- Query结构体\n    > 用来存放查询功能用到的关键属性，例如查询命令类型，查询范围等等，以便后续的查询重写和查询规划。\n\n    ```C++\n    typedef struct Query\n    {\n    NodeTag   type;\n    CmdType   commandType;  /* select|insert|update|delete|merge|utility /\n    *   QuerySource querySource;  /* where did I come from? /\n    *   int     resultRelation; /* rtable index of target relation for\n                    * INSERT/UPDATE/DELETE/MERGE; 0 for SELECT */\n    List     rtable;     / list of range table entries */\n    FromExpr   jointree;   / table join tree (FROM and WHERE clauses);\n                    * also USING clause for MERGE */\n    List     targetList;   / target list (of TargetEntry) */\n    } Query;\n    ```\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ut=(0,r.A)(dt,[["render",pt],["__scopeId","data-v-025e3ac2"]]);var mt=ut;const ht=e=>((0,l.Qi)("data-v-269f43b2"),e=e(),(0,l.jt)(),e),gt={class:"common-layout"},kt=ht((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ft={class:"header-content"},vt=(0,l.eW)("Back"),bt=ht((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M2M2(查询重写模块)",-1))),yt=ht((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Lt={class:"image-container"},xt=["src"],Ft={name:"image-map",id:"image-map"},Ct=["shape","coords","href","onClick","onMouseover","onMouseout"],_t=ht((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Tt=(0,l.eW)("Next step"),Mt=["innerHTML"],St={key:0,class:"rounded-box"},Et=ht((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),At=[Et];function wt(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",gt,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[kt,(0,l.Lk)("div",ft,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[vt])),_:1},8,["onClick"]),bt]),yt])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Lt,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,xt),(0,l.Lk)("map",Ft,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Ct)))),128))])]),_t,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Tt])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Mt),s.active>=1?((0,l.uX)(),(0,l.CE)("div",St,At)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Pt={data(){return{active:0,imageSrc:"/pictures/level2/L2M2M2.png",hotspots:[{id:"1",shape:"poly",coords:"9,103,188,102,199,98,204,94,205,80,204,16,201,7,195,4,192,1,16,1,7,3,4,6,1,19,1,90,3,97",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"675,720,854,719,865,715,870,711,871,697,870,633,867,624,861,621,858,618,682,618,673,620,670,623,667,636,667,707,669,714",href:"/l2m2m3"}],markdownText:"**总览**\n\n> 根据已定义的规则对查询树进行重写\n\n**数据流信息**\n\n- `Query`，查询结构体\n\n- 以List*结构体构建的 `querytree_list` 查询树链表，重写后可能变为0-N个查询树，因此变为链表\n\n**图内数据结构及重要节点展示：**\n\n- Query ：查询结构体，已在L2M2M1展示过\n- querytree_list 实际上是List*, 节点内装入Query*，简单的链表结构\n\n- 入口函数：在此处将查询结构体区分为 `utilitie` (非数据检索任务，如数据定义`CREATE TABLE`等)和 非`utilitie`，前者不进行重写，统一数据结构后直接结束本模块\n\n- 查询结构体表生成器(`list_make1`)：主要功能是统一输出，将`utilitie`方向的输出从单个`Query`变为一个链表\n\n- 规则：查询重写的核心是规则系统，可以是通过CREATE RULE定义，也可以是“视图”(PG的视图实际上是定义了一个规则)。规则按命令分为 **SELECT/INSERT/UPDATE/DELETE**， 按动作分为**INSTEAD/ALSO**\n  \n    - INSTEAD将原来的操作替换，ALSO在原操作基础上额外做动作\n    \n    - SELECT规则为一个动作的无条件INSTEAD规则（安全性等诸多因素限制）\n    \n    - SELECT规则别称RIR规则，这是历史遗留，在古代（PostQUEL时代）的RETRIEVE对应于现在的SELECT，所以全称是`RETRIEVE-INSTEAD-RULE`\n\n- 非RIR规则应用：对INSERT/UPDATE/DELETE处理，主要调整CTE(`Common`**` `**`Table`**` `**`Expressions` 公用表表达式 / 临时结果集)和`TargetList`\n\n- RIR规则应用：对SELECT处理，调整RTE(`Range Table`范围表，可以是表或子查询)和CTE\n\n- 设置命令结果标签：标识出哪个`Query`是重写后查询的最终结果，即字段`canSetTag`\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Ht=(0,r.A)(Pt,[["render",wt],["__scopeId","data-v-269f43b2"]]);var It=Ht;const Xt=e=>((0,l.Qi)("data-v-08e3c826"),e=e(),(0,l.jt)(),e),Rt={class:"common-layout"},Bt=Xt((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ot={class:"header-content"},Qt=(0,l.eW)("Back"),$t=Xt((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M2M3(查询规划模块)",-1))),Nt=Xt((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Wt={class:"image-container"},Dt=["src"],jt={name:"image-map",id:"image-map"},qt=["shape","coords","href","onClick","onMouseover","onMouseout"],Ut=Xt((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Kt=(0,l.eW)("Next step"),zt=["innerHTML"],Gt={key:0,class:"rounded-box"},Jt=Xt((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Vt=[Jt];function Yt(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Rt,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Bt,(0,l.Lk)("div",Ot,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Qt])),_:1},8,["onClick"]),$t]),Nt])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Wt,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Dt),(0,l.Lk)("map",jt,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,qt)))),128))])]),Ut,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Kt])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,zt),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Gt,Vt)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Zt={data(){return{active:0,imageSrc:"/pictures/level2/L2M2M3.png",hotspots:[{id:"1",shape:"poly",coords:"53,191,266,190,276,185,280,180,281,85,276,78,269,72,57,70,47,74,44,80,41,84,40,175,45,184",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"1142,790,1141,883,1144,890,1147,900,1153,901,1366,901,1375,895,1381,887,1380,787,1377,781,1372,778,1367,773,1158,771,1148,774,1144,780",href:"/l2m2m4"},{id:"3",shape:"poly",coords:"1142,420,1141,513,1144,520,1147,530,1153,531,1366,531,1375,525,1381,517,1380,417,1377,411,1372,408,1367,403,1158,401,1148,404,1144,410",href:"/l3m2m3m3"},{id:"3",shape:"poly",coords:"561,418,560,511,563,518,566,528,572,529,785,529,794,523,800,515,799,415,796,409,791,406,786,401,577,399,567,402,563,408",href:"/l3m2m3m2"},{id:"3",shape:"poly",coords:"42,418,41,511,44,518,47,528,53,529,266,529,275,523,281,515,280,415,277,409,272,406,267,401,58,399,48,402,44,408",href:"/l3m2m3m1"}],markdownText:"**总览**\n\n> 根据查询树生成查询计划\n\n**数据流信息**\n\n- `querytree_list` 查询树链表\n- 以`PlannedStmt`结构体构建起的链表`plantree_list`\n\nFor Each ：在查询规划模块中，接受查询树链表，输出计划树链表，在处理过程中对每棵查询树生成计划树，最后汇总\n\n- 规划信息PlannerInfo：贯穿整个规划过程，记录规划过程中所需要的各种数据，包括路径信息等\n\n```C\nstruct PlannerInfo\n{\n    NodeTag     type;\n    Query      *parse;          /* the Query being planned */ //正在处理的Query\n    PlannerGlobal *glob;        /* global info for current planner run */\n    Index       query_level;    /* 1 at the outermost Query */\n    PlannerInfo *parent_root;   /* NULL at outermost Query */\n    List      *plan_params;    /* list of PlannerParamItems, see below */\n    Bitmapset  *outer_params;\n    struct RelOptInfo **simple_rel_array;   /* All 1-rel RelOptInfos */ \n    int         simple_rel_array_size;  /* allocated size of array */\n    //省略N行，非常庞大\n};\n```\n\n- 优化信息RelOptInfo：存放优化信息，最重要的是包含了路径信息\n\n```C\ntypedef struct RelOptInfo\n{\n        NodeTag                type;\n        RelOptKind        reloptkind;\n        /* all relations included in this RelOptInfo */\n        Relids                relids;                        /* set of base relids (rangetable indexes) */\n        /* size estimates generated by planner */\n        double                rows;                        /* estimated number of result tuples */\n        /* default result targetlist for Paths scanning this relation */\n        struct PathTarget *reltarget;        /* list of Vars/Exprs, cost, width */\n        /* materialization information */\n        List           *pathlist;                /* Path structures */\n        List           *ppilist;                /* ParamPathInfos used in pathlist */\n        List           *partial_pathlist;        /* partial Paths */\n        struct Path *cheapest_startup_path;\n        struct Path *cheapest_total_path;\n        struct Path *cheapest_unique_path;\n        List           *cheapest_parameterized_paths;\n        //省略N行，非常庞大\n} RelOptInfo;\n```\n\n- 路径Path：路径信息\n\n```C\nstruct Path\n{\n    NodeTag     type;\n\n    NodeTag     pathtype;       /* tag identifying scan/join method */\n\n    RelOptInfo *parent;         /* the relation this path can build */\n    PathTarget *pathtarget;     /* list of Vars/Exprs, cost, width */\n    ParamPathInfo *param_info;  /* parameterization info, or NULL if none */\n\n//并行信息\n    bool        parallel_aware; /* engage parallel-aware logic? */\n    bool        parallel_safe;  /* OK to use as part of parallel plan? */\n    int         parallel_workers;   /* desired # of workers; 0 = not parallel */\n\n//cost信息\n    /* estimated size/costs for path (see costsize.c for more info) */\n    Cardinality rows;           /* estimated number of result tuples */\n    Cost        startup_cost;   /* cost expended before fetching any tuples */\n    Cost        total_cost;     /* total cost (assuming all tuples fetched) */\n\n// 路径键\n    List       *pathkeys;       /* sort ordering of path's output */\n}\n```\n\n- 预处理模块：进行预处理和优化查询(部分)，生成规划信息用于路径生成\n- 路径生成模块：生成查询路径，存放到规划信息中\n- 计划生成模块：细化路径（如确定扫描方法），生成足够详细的计划\n- 在整个查询规划结束后，N个输入的计划树产生的N个计划语句被打包为一个list运走\n            "}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const en=(0,r.A)(Zt,[["render",Yt],["__scopeId","data-v-08e3c826"]]);var tn=en;const nn=e=>((0,l.Qi)("data-v-04322e5e"),e=e(),(0,l.jt)(),e),on={class:"common-layout"},ln=nn((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),an={class:"header-content"},sn=(0,l.eW)("Back"),rn=nn((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M2M4(查询执行模块)",-1))),cn=nn((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),pn={class:"image-container"},dn=["src"],un={name:"image-map",id:"image-map"},mn=["shape","coords","href","onClick","onMouseover","onMouseout"],hn=nn((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),gn=(0,l.eW)("Next step"),kn=["innerHTML"],fn={key:0,class:"rounded-box"},vn=nn((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),bn=[vn];function yn(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",on,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[ln,(0,l.Lk)("div",an,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[sn])),_:1},8,["onClick"]),rn]),cn])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",pn,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,dn),(0,l.Lk)("map",un,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,mn)))),128))])]),hn,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[gn])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,kn),s.active>=1?((0,l.uX)(),(0,l.CE)("div",fn,bn)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ln={data(){return{active:0,imageSrc:"/pictures/level2/L2M2M4.png",hotspots:[{id:"1",shape:"poly",coords:"16,231,188,230,197,226,200,223,200,214,199,142,194,134,193,132,187,130,11,130,4,134,2,138,-1,143,-1,215,0,223,6,227",href:"/l2m2m3"},{id:"2",shape:"poly",coords:"1094,346,1266,345,1275,341,1278,338,1278,329,1277,257,1272,249,1271,247,1265,245,1089,245,1082,249,1080,253,1077,258,1077,330,1078,338,1084,342",href:"/next-level/3"},{id:"3",shape:"poly",coords:"1093,119,1265,118,1274,114,1277,111,1277,102,1276,30,1271,22,1270,20,1264,18,1088,18,1081,22,1079,26,1076,31,1076,103,1077,111,1083,115",href:"/l1m4"}],markdownText:"- - **总述**\n\n  - > 经过前面几部分将sql语句转换成执行计划后，会将执行计划plantree传递给查询执行器。总体上看，查询执行器就是按照查询计划的安排，调用存储、索引、并发等功能模块，按照各个计划节点的实现算法来执行数据的读取和修改。\n\n  - **模块信息**\n\n  - - 策略选择模块 Portal\n      - > Portal模块将sql语句划分为两种类型，后续分别执行。整个查询执行的策略选择、启动、回收都由Portal 组件完成。\n    - 功能处理器 UtilityProcessor\n      - > 处理数据定义语句，根据不同功能分别调用\n    - 执行器 Executor\n      - > 处理可优化语句，包含若干个查询计划树，严格按计划树执行\n\n  - **数据流信息**\n\n  - - 计划树表 plantree_list\n      - > 查询规划模块处理结束后生成的计划树列表。\n    - 计划语句 PlannedStmt\n      - > 计划语句 PlannedStmt 是计划树表 plantree_list 内的元素，封装了查询规划模块生成的计划树 planTree，包含了一次执行所需的全部信息。\n\n      - ```SQL\n        /* ----------------\n         *                PlannedStmt node\n         *\n         * The output of the planner is a Plan tree headed by a PlannedStmt node.\n         * PlannedStmt holds the \"one time\" information needed by the executor.\n         *\n         * For simplicity, we also wrap utility statements in PlannedStmt nodes.\n         * ----------------\n         */\n        typedef struct PlannedStmt\n        {\n                NodeTag                type;\n        \n                CmdType                commandType;        /* select|insert|update|delete|merge|utility */\n        \n                /* ... */\n                \n                struct Plan *planTree;                /* tree of Plan nodes */\n                \n                /* ... */\n        \n        } PlannedStmt;\n        ```\n    - 查询描述符 QueryDesc\n      - > Portal在处理查询语句前会将 plantree_list 封装成查询描述符 QueryDesc，其中包含了执行器执行查询所需的所有内容。\n\n      - ```C\n        /* ----------------\n         *                query descriptor:\n         *\n         *        a QueryDesc encapsulates everything that the executor\n         *        needs to execute the query.\n         * ---------------------\n         */\n        typedef struct QueryDesc\n        {\n                /* These fields are provided by CreateQueryDesc */\n                CmdType                operation;                /* CMD_SELECT, CMD_UPDATE, etc. */\n                PlannedStmt *plannedstmt;        /* planner's output (could be utility, too) */\n                \n                /* ... */\n                \n                /* These fields are set by ExecutorStart */\n                TupleDesc        tupDesc;                /* descriptor for result tuples */\n                EState           *estate;                        /* executor's query-wide state */\n                PlanState  *planstate;                /* tree of per-plan-node state */\n        \n                /* This field is set by ExecutorRun */\n                bool                already_executed;        /* true if previously executed */\n        \n                /* This is always set NULL by the core system, but plugins can change it */\n                struct Instrumentation *totaltime;        /* total time spent in ExecutorRun */\n        } QueryDesc;\n        ```\n\n#### 策略选择模块(Portal)\n\n**算法解析**\n\nPortal模块将sql语句划分为两种类型：\n\n- 执行计划树操作  ：可优化语句(DML，如SELECT，INSERT，UPDATE，DELETE)\n- 非执行计划树操作 ：数据定义语句(DDL，如CREATE TABLE)\n\n整个查询执行的策略选择、启动、回收 都由Portal 组件完成\n![img](/pictures/level2/portal_ari.png)\n\nPortal数据结构：\n\n```C++\ntypedef struct PortalData *Portal;\n  \n typedef struct PortalData\n {\n     /* Bookkeeping data */\n     const char *name;           /* portal's name */\n  \n     /* The query or queries the portal will execute */\n     const char *sourceText;     /* text of query (as of 8.4, never NULL) */\n     CommandTag  commandTag;     /* command tag for original query */\n     List       *stmts;          /* list of PlannedStmts */\n     // 查询树链表\n     /* If not NULL, Executor is active; call ExecutorEnd eventually: */\n     QueryDesc  *queryDesc;      /* info needed for executor invocation */\n     // 查执行所需的所有信息\n     /* If portal returns tuples, this is their tupdesc: */\n     TupleDesc   tupDesc;        /* descriptor for result tuples */\n     // 可能的返回元组的结构\n     /* Features/options */\n     PortalStrategy strategy;    /* see above */\n     \n     /* Status data */\n     PortalStatus status;        /* see above */\n } PortalData;  \n```\n\n选择执行策略时主要根据原子操作的命令类型（是否是功能语句）以及查询树链表中原子操作的个数（是否仅为一个）。执行策略共分为以下五种：\n\n```C++\ntypedef enum PortalStrategy\n{\n    // 处理 SELECT 类语句，调用执行器\n    PORTAL_ONE_SELECT,\n    // 需要进行元组操作、缓存结果，调用执行器执行\n    PORTAL_ONE_RETURNING,\n    // 包含 SELECT 查询且有修改的 CTE\n    PORTAL_ONE_MOD_WITH,\n    // 单一数据定义语句，调用功能处理器\n    PORTAL_UTIL_SELECT,\n    // 混合策略，处理多个原子操作\n    PORTAL_MULTI_QUERY,\n} PortalStrategy;\n```\n\n#### 功能处理器(UtilityProcessor)\n![img](/pictures/level2/up.png)\n\n**总述**\n\n> UtilityProcessor 功能处理器负责处理数据定义（DDL）语句，会根据不同功能分别调用功能子函数。入口函数 ProcessUtility 会调用 standard_ProcessUtility，为该函数提供要执行的语句的类型、内容等，在内部依据 nodeTag 分发对应的操作。\n\n**算法解析**\n\n大体上可以将 nodeTag 分为以下类别：\n\n| 节点类型nodeTag        | 核心处理函数          | 功能                                           |\n| ---------------------- | --------------------- | ---------------------------------------------- |\n| T_TransactionStmt      | BeginTransactionBlock | 标记事务开始                                   |\n| EndTransactionBlock    | 结束事务              |                                                |\n| DefineSavepoint        | 定义保存点            |                                                |\n| RollbackToSavepoint    | 回滚到保存点          |                                                |\n| T_PlannedStmt          | PerformCursorOpen     | 打开游标操作，初始化查询                       |\n| T_ClosePortalStmt      | PerformPortalClose    | 关闭游标，释放游标占用资源                     |\n| T_FetchStmt            | PerformPortalFetch    | 执行 FETCH/MOVE 操作                           |\n| T_CreateStmt           | DefineRelation        | 创建关系表                                     |\n| T_CreateTableSpaceStmt | CreateTableSpace      | 创建 tablespace，记录在 pg_tablespace 系统表中 |\n| T_DropStmt             | RemoveRelations       | 删除关系表                                     |\n| RemoveTypes            | 删除自定义类型        |                                                |\n| T_CommentStmt          | CommentObiect         | 记录注释信息到 pg_description                  |\n| T_CopyStmt             | DoCopy                | 完成 COPY 命令操作                             |\n| T_AlterTableStmt       | AlterTable            | 实现 ALTER TABLE 命令                          |\n| T_IndexStmt            | DefineIndex           | 创建索引                                       |\n| T_CreateSeqStmt        | DefineSequence        | 创建一个用于自增属性的关系表                   |\n| T_ExplainStmt          | ExplainQuery          | 执行 EXPLAIN 命令                              |\n\n#### L3M2M4M3(执行器)\n\n对于可优化的语句，psql 最后会生成一个查询计划树。查询逻辑使用逻辑代数表示，在执行时需要物理代数(physical algebra)。\n\nPSQL 中的执行计划可以组织成一个二叉树（查询计划树）：每个物理操作符拥有 0~2 个输入和 1 个输出。在执行时数据流（元组）从下层流向上层，下层节点的输出作为上层节点的输入。根节点的输出即为查询的结果。\n\n![img](/pictures/level2/portal.png)\n\n物理代数的计划节点按照功能分为四类：控制节点(control node)、扫描节点(scan node)、连接节点(join node)和物化节点(materialization node)。他们都继承于公共父类 Plan，并为扫描、连接节点定义了公共父类 Scan，Join。Hash连接属于连接节点，故继承于Join。\n\n```C++\n// 计划节点数据结构\ntypedef struct Plan\n{\n    NodeTag     type;\n    /*\n     * Common structural data for all Plan types.\n     */\n    int         plan_node_id;   /* unique across entire final plan tree */\n    List       *targetlist;     /* target list to be computed at this node */\n    List       *qual;           /* implicitly-ANDed qual conditions */\n    struct Plan *lefttree;      /* input plan tree(s) */\n    struct Plan *righttree;\n    List       *initPlan;       /* Init Plan nodes (un-correlated expr\n                                 * subselects) */\n    Bitmapset  *extParam;\n    Bitmapset  *allParam;\n} Plan;\n\ntypedef struct Scan\n{\n    Plan        plan;\n    Index       scanrelid;      /* relid is index into the range table */\n} Scan;\n\ntypedef struct Join\n{\n    Plan        plan;\n    JoinType    jointype;\n    bool        inner_unique;\n    List       *joinqual;       /* JOIN quals (in addition to plan.qual) */\n} Join;\n```\n\n查询计划树的初始化：Executor对查询计划树的初始化都是从根节点开始，递归对其子节点进行初始化。初始化由 ExeclnitNode 函数进行。每一种计划节点都有专门的初始化函数。在初始化的时候层层向下递归，完成初始化后层层返回。最终构造出完整的计划树：\n\n```C++\nPlanState *\nExecInitNode(Plan *node, EState *estate, int eflags)\n{\n    PlanState  *result;\n    List       *subps;\n    ListCell   *l;\n    if (node == NULL)\n        return NULL;\n    check_stack_depth();\n\n    switch (nodeTag(node))\n    {\n        case T_Result:\n            result = (PlanState *) ExecInitResult((Result *) node, estate, eflags);\n            break;\n        .........\n```\n\n查询计划执行：实际执行部分由 ExecutePlan 函数完成。ExecutePlan 实际上是一个大循环，每次循环调用 ExecProcNode，从计划树中获取一个元组并进行相应处理.\n\n执行器清理：当执行器处理完所有可获得的元组后，有ExecutorEnd函数进行善后。该函数的运行逻辑与ExecInitNode本质上一样，针对不同类型节点调用不同的清理函数，并从根节点开始递归清理。\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const xn=(0,r.A)(Ln,[["render",yn],["__scopeId","data-v-04322e5e"]]);var Fn=xn;const Cn=e=>((0,l.Qi)("data-v-64e9d3a4"),e=e(),(0,l.jt)(),e),_n={class:"common-layout"},Tn=Cn((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Mn={class:"header-content"},Sn=(0,l.eW)("Back"),En=Cn((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M3M1",-1))),An=Cn((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),wn={class:"image-container"},Pn=["src"],Hn={name:"image-map",id:"image-map"},In=["shape","coords","href","onClick","onMouseover","onMouseout"],Xn=Cn((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Rn=(0,l.eW)("Next step"),Bn={key:0,class:"rounded-box"},On=Cn((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Qn=[On];function $n(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",_n,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Tn,(0,l.Lk)("div",Mn,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Sn])),_:1},8,["onClick"]),En]),An])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",wn,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Pn),(0,l.Lk)("map",Hn,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,In)))),128))])]),Xn,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Rn])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Bn,Qn)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Nn={data(){return{active:0,imageSrc:"/pictures/level2/L2M3M1.png",hotspots:[{id:"6",shape:"poly",coords:"145,49,1296,49,1306,59,1306,227,1296,237,145,237,135,227,135,59",href:"/your-new-route"},{id:"1",shape:"poly",coords:"168,610,308,610,318,620,318,681,308,691,168,691,158,681,158,620",href:"/l3m3m1m3"},{id:"2",shape:"poly",coords:"392,603,562,603,567,608,572,613,572,686,567,691,562,696,392,696,387,691,382,686,382,613,387,608",href:"/l3m3m1m2"},{id:"3",shape:"poly",coords:"860,603,1050,603,1055,608,1060,613,1060,686,1055,691,1050,696,860,696,855,691,850,686,850,613,855,608",href:"/l3m3m1m1"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Wn=(0,r.A)(Nn,[["render",$n],["__scopeId","data-v-64e9d3a4"]]);var Dn=Wn;const jn=e=>((0,l.Qi)("data-v-2312d83d"),e=e(),(0,l.jt)(),e),qn={class:"common-layout"},Un=jn((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Kn={class:"header-content"},zn=(0,l.eW)("Back"),Gn=jn((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M2M3M1(查询规划——预处理)",-1))),Jn=jn((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Vn={class:"image-container"},Yn=["src"],Zn={name:"image-map",id:"image-map"},eo=["shape","coords","href","onClick","onMouseover","onMouseout"],to=jn((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),no=(0,l.eW)("Next step"),oo=["innerHTML"],lo={key:0,class:"rounded-box"},ao=jn((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),so=[ao];function io(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",qn,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Un,(0,l.Lk)("div",Kn,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[zn])),_:1},8,["onClick"]),Gn]),Jn])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Vn,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Yn),(0,l.Lk)("map",Zn,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,eo)))),128))])]),to,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[no])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,oo),s.active>=1?((0,l.uX)(),(0,l.CE)("div",lo,so)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ro={data(){return{active:0,imageSrc:"/pictures/level3/L3M2M3M1.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"**总览**\n\n> 预处理和优化查询，生成规划信息用于路径生成，对应于代数优化\n\n**数据流信息**\n\n- 查询树链表的一个子查询(一棵查询树的一个查询节点，图中省略了for each)\n- 规划信息 `PlannerInfo`\n- 提升子链接与子查询：\n  - 子查询：完整语句，主要出现在FROM中\n  - 子链接：表达式，主要出现在WHERE中\n  - 举例展示此过程：\n    - 原始：`select d.name from dept d where d.deptno in (select e.deptno from emp e where e.sal = 1000);`\n    - 先提升子链接为子查询：`select d.name from dept d (select e.deptno from emp e where e.sal = 1000) as sub where d.deptno = sub.deptno;`\n    - 提升子查询：`select d.name from dept d, emp e where d.deptno = e.deptno and e.sal = 1000;`\n    - 显然，提升完成后比原意执行要高效得多\n- 范围表扫描与优化：遍历查询中的所有 RTE（如表、连接等），并检查是否存在外连接（简单地说，对于连接时不匹配的项，外连接保留，内连接不保留，内连接更省时间）等，进行优化。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const co=(0,r.A)(ro,[["render",io],["__scopeId","data-v-2312d83d"]]);var po=co;const uo=e=>((0,l.Qi)("data-v-86f86c6e"),e=e(),(0,l.jt)(),e),mo={class:"common-layout"},ho=uo((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),go={class:"header-content"},ko=(0,l.eW)("Back"),fo=uo((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M2M3M2(查询规划——路径生成)",-1))),vo=uo((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),bo={class:"image-container","align-center":""},yo=["src"],Lo={name:"image-map",id:"image-map"},xo=["shape","coords","href","onClick","onMouseover","onMouseout"],Fo=uo((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Co=(0,l.eW)("Next step"),_o=["innerHTML"],To={key:0,class:"rounded-box"},Mo=uo((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),So=[Mo];function Eo(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",mo,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[ho,(0,l.Lk)("div",go,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ko])),_:1},8,["onClick"]),fo]),vo])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",bo,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,yo),(0,l.Lk)("map",Lo,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,xo)))),128))])]),Fo,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Co])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,_o),s.active>=1?((0,l.uX)(),(0,l.CE)("div",To,So)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ao={data(){return{active:0,imageSrc:"/pictures/level3/L3M2M3M2.png",hotspots:[{id:"1",shape:"poly",coords:"135,246,341,245,353,245,357,237,360,230,361,134,357,122,350,119,343,115,140,115,131,118,123,127,121,130,121,227,125,239",href:"/l3m2m3m1"},{id:"2",shape:"poly",coords:"560,1726,766,1725,778,1725,782,1717,785,1710,786,1614,782,1602,775,1599,768,1595,565,1595,556,1598,548,1607,546,1610,546,1707,550,1719",href:"/l3m2m3m3"},{id:"3",shape:"poly",coords:"865,1157,1278,1156,1290,1149,1294,1140,1295,1032,1289,1024,1279,1017,861,1017,845,1024,844,1034,845,1141,850,1151,858,1154",href:"/l4m2m3m2m1"}],markdownText:"**总览**\n\n> 生成最优路径和候选路径\n\n**数据流信息**\n\n- 规划信息PlannerInfo\n- 带有路径信息RelOptInfo的规划信息 \n\n> - 集合：指交并差INTERSECT/UNION/MINUS，是这些操作则需要使用集合规划器进行规划\n\n> - 路径键：查询结果的排序顺序。主要作用是帮助优化器确定查询计划中各个步骤的输出是否已经排序，以及排序的顺序是什么\n\n> - 初步路径规划：只考虑如何扫描以及如何连接等基础操作，会生成所有可行路径，其中最优路径带有cheapest标签。物理优化集中于此处。\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const wo=(0,r.A)(Ao,[["render",Eo],["__scopeId","data-v-86f86c6e"]]);var Po=wo;const Ho=e=>((0,l.Qi)("data-v-0dd4217f"),e=e(),(0,l.jt)(),e),Io={class:"common-layout"},Xo=Ho((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ro={class:"header-content"},Bo=(0,l.eW)("Back"),Oo=Ho((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M2M3M3(查询规划——计划生成)",-1))),Qo=Ho((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),$o={class:"image-container"},No=["src"],Wo={name:"image-map",id:"image-map"},Do=["shape","coords","href","onClick","onMouseover","onMouseout"],jo=Ho((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),qo=(0,l.eW)("Next step"),Uo=["innerHTML"],Ko={key:0,class:"rounded-box"},zo=Ho((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Go=[zo];function Jo(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Io,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Xo,(0,l.Lk)("div",Ro,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Bo])),_:1},8,["onClick"]),Oo]),Qo])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",$o,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,No),(0,l.Lk)("map",Wo,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Do)))),128))])]),jo,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[qo])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Uo),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Ko,Go)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Vo={data(){return{active:0,imageSrc:"/pictures/level3/L3M2M3M3.png",hotspots:[{id:"1",shape:"poly",coords:"82,215,292,217,303,211,307,200,309,191,307,103,305,93,296,85,82,85,72,94,69,101,70,198,73,208",href:"/l3m2m3m2"},{id:"2",shape:"poly",coords:"1414,958,1625,958,1636,953,1639,948,1640,939,1640,837,1635,830,1629,823,1624,820,1417,819,1410,820,1404,828,1397,838,1398,940,1406,951",href:"/l2m2m4"}],markdownText:"**总览**\n\n> 从路径生成计划\n\n**数据流信息**\n\n- 路径信息以及规划信息(Path 从规划信息中得出)\n- 计划语句`PlannedStmt`（内含计划树`Plan*`）构成的计划树链表\n\n简单来讲其实是一个逐层打包的过程\n\n- **路径（Path）**\n  - 在路径中，主要包含访问方法、成本估算、连接类型等信息。\n  - 路径不包含执行逻辑或操作步骤。\n- **计划树（Plan）**\n  - 在计划树中，添加了执行逻辑、操作步骤、输入输出关系等。\n  - 每个计划节点不仅包含操作类型，还包含执行该操作所需的参数和状态信息。\n- **计划语句(PlannedStmt)**\n  - 打包了额外的上下文信息，如查询的类型（`commandType`）、是否有返回值（`hasReturning`）、是否涉及角色依赖（`dependsOnRole`）等。\n  - 包含了查询的结果关系、子查询计划、游标处理信息等\n\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const Yo=(0,r.A)(Vo,[["render",Jo],["__scopeId","data-v-0dd4217f"]]);var Zo=Yo;const el=e=>((0,l.Qi)("data-v-7f4a119c"),e=e(),(0,l.jt)(),e),tl={class:"common-layout"},nl=el((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ol={class:"header-content"},ll=(0,l.eW)("Back"),al=el((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M1(查询规划——预处理)",-1))),sl=el((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),il={class:"image-container"},rl=["src"],cl={name:"image-map",id:"image-map"},pl=["shape","coords","href","onClick","onMouseover","onMouseout"],dl=el((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),ul=(0,l.eW)("Next step"),ml=["innerHTML"],hl={key:0,class:"rounded-box"},gl=el((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),kl=[gl];function fl(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",tl,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[nl,(0,l.Lk)("div",ol,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ll])),_:1},8,["onClick"]),al]),sl])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",il,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,rl),(0,l.Lk)("map",cl,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,pl)))),128))])]),dl,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[ul])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,ml),s.active>=1?((0,l.uX)(),(0,l.CE)("div",hl,kl)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var vl={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M1.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"**总览**\n\n> 预处理和优化查询，生成规划信息用于路径生成，对应于代数优化\n\n**数据流信息**\n\n- 查询树链表的一个子查询(一棵查询树的一个查询节点，图中省略了for each)\n- 规划信息 `PlannerInfo`\n- 提升子链接与子查询：\n  - 子查询：完整语句，主要出现在FROM中\n  - 子链接：表达式，主要出现在WHERE中\n  - 举例展示此过程：\n    - 原始：`select d.name from dept d where d.deptno in (select e.deptno from emp e where e.sal = 1000);`\n    - 先提升子链接为子查询：`select d.name from dept d (select e.deptno from emp e where e.sal = 1000) as sub where d.deptno = sub.deptno;`\n    - 提升子查询：`select d.name from dept d, emp e where d.deptno = e.deptno and e.sal = 1000;`\n    - 显然，提升完成后比原意执行要高效得多\n- 范围表扫描与优化：遍历查询中的所有 RTE（如表、连接等），并检查是否存在外连接（简单地说，对于连接时不匹配的项，外连接保留，内连接不保留，内连接更省时间）等，进行优化。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const bl=(0,r.A)(vl,[["render",fl],["__scopeId","data-v-7f4a119c"]]);var yl=bl;const Ll=e=>((0,l.Qi)("data-v-256a2f86"),e=e(),(0,l.jt)(),e),xl={class:"common-layout"},Fl=Ll((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Cl={class:"header-content"},_l=(0,l.eW)("Back"),Tl=Ll((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M2(查询规划——预处理)",-1))),Ml=Ll((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Sl={class:"image-container"},El=["src"],Al={name:"image-map",id:"image-map"},wl=["shape","coords","href","onClick","onMouseover","onMouseout"],Pl=Ll((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Hl=(0,l.eW)("Next step"),Il=["innerHTML"],Xl={key:0,class:"rounded-box"},Rl=Ll((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Bl=[Rl];function Ol(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",xl,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Fl,(0,l.Lk)("div",Cl,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[_l])),_:1},8,["onClick"]),Tl]),Ml])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Sl,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,El),(0,l.Lk)("map",Al,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,wl)))),128))])]),Pl,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Hl])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,Il),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Xl,Bl)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ql={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M2.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"**总览**\n\n> 预处理和优化查询，生成规划信息用于路径生成，对应于代数优化\n\n**数据流信息**\n\n- 查询树链表的一个子查询(一棵查询树的一个查询节点，图中省略了for each)\n- 规划信息 `PlannerInfo`\n- 提升子链接与子查询：\n  - 子查询：完整语句，主要出现在FROM中\n  - 子链接：表达式，主要出现在WHERE中\n  - 举例展示此过程：\n    - 原始：`select d.name from dept d where d.deptno in (select e.deptno from emp e where e.sal = 1000);`\n    - 先提升子链接为子查询：`select d.name from dept d (select e.deptno from emp e where e.sal = 1000) as sub where d.deptno = sub.deptno;`\n    - 提升子查询：`select d.name from dept d, emp e where d.deptno = e.deptno and e.sal = 1000;`\n    - 显然，提升完成后比原意执行要高效得多\n- 范围表扫描与优化：遍历查询中的所有 RTE（如表、连接等），并检查是否存在外连接（简单地说，对于连接时不匹配的项，外连接保留，内连接不保留，内连接更省时间）等，进行优化。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const $l=(0,r.A)(Ql,[["render",Ol],["__scopeId","data-v-256a2f86"]]);var Nl=$l;const Wl=e=>((0,l.Qi)("data-v-5b4bbede"),e=e(),(0,l.jt)(),e),Dl={class:"common-layout"},jl=Wl((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ql={class:"header-content"},Ul=(0,l.eW)("Back"),Kl=Wl((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L3M3M1M3(查询规划——预处理)",-1))),zl=Wl((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Gl={class:"image-container"},Jl=["src"],Vl={name:"image-map",id:"image-map"},Yl=["shape","coords","href","onClick","onMouseover","onMouseout"],Zl=Wl((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),ea=(0,l.eW)("Next step"),ta=["innerHTML"],na={key:0,class:"rounded-box"},oa=Wl((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),la=[oa];function aa(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Dl,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[jl,(0,l.Lk)("div",ql,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Ul])),_:1},8,["onClick"]),Kl]),zl])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Gl,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Jl),(0,l.Lk)("map",Vl,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Yl)))),128))])]),Zl,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[ea])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,ta),s.active>=1?((0,l.uX)(),(0,l.CE)("div",na,la)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var sa={data(){return{active:0,imageSrc:"/pictures/level3/L3M3M1M3.png",hotspots:[{id:"1",shape:"poly",coords:"39,182,247,181,259,174,261,164,262,75,254,66,249,62,35,60,24,66,23,79,21,164,24,173,30,177",href:"/l2m2m2"},{id:"2",shape:"poly",coords:"630,943,837,943,846,945,851,951,857,959,857,1055,853,1063,848,1069,842,1073,631,1073,627,1070,621,1064,618,1057,618,959,618,952,624,947",href:"/l3m2m3m2"}],markdownText:"**总览**\n\n> 预处理和优化查询，生成规划信息用于路径生成，对应于代数优化\n\n**数据流信息**\n\n- 查询树链表的一个子查询(一棵查询树的一个查询节点，图中省略了for each)\n- 规划信息 `PlannerInfo`\n- 提升子链接与子查询：\n  - 子查询：完整语句，主要出现在FROM中\n  - 子链接：表达式，主要出现在WHERE中\n  - 举例展示此过程：\n    - 原始：`select d.name from dept d where d.deptno in (select e.deptno from emp e where e.sal = 1000);`\n    - 先提升子链接为子查询：`select d.name from dept d (select e.deptno from emp e where e.sal = 1000) as sub where d.deptno = sub.deptno;`\n    - 提升子查询：`select d.name from dept d, emp e where d.deptno = e.deptno and e.sal = 1000;`\n    - 显然，提升完成后比原意执行要高效得多\n- 范围表扫描与优化：遍历查询中的所有 RTE（如表、连接等），并检查是否存在外连接（简单地说，对于连接时不匹配的项，外连接保留，内连接不保留，内连接更省时间）等，进行优化。\n            "}},computed:{compiledMarkdown(){return this.$md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const ia=(0,r.A)(sa,[["render",aa],["__scopeId","data-v-5b4bbede"]]);var ra=ia;const ca=e=>((0,l.Qi)("data-v-1ad6e9b4"),e=e(),(0,l.jt)(),e),pa={class:"common-layout"},da=ca((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),ua={class:"header-content"},ma=(0,l.eW)("Back"),ha=ca((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L4M2M3M3M1(初步路径规划)",-1))),ga=ca((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),ka={class:"image-container"},fa=["src"],va={name:"image-map",id:"image-map"},ba=["shape","coords","href","onClick","onMouseover","onMouseout"],ya=ca((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),La=(0,l.eW)("Next step"),xa=["innerHTML"],Fa={key:0,class:"rounded-box"},Ca=ca((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),_a=[Ca];function Ta(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",pa,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[da,(0,l.Lk)("div",ua,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ma])),_:1},8,["onClick"]),ha]),ga])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",ka,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,fa),(0,l.Lk)("map",va,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ba)))),128))])]),ya,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[La])),_:1},8,["onClick"]),(0,l.Lk)("div",{innerHTML:i.compiledMarkdown,class:"markdown-body"},null,8,xa),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Fa,_a)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ma={data(){return{active:0,imageSrc:"/pictures/level4/L4M2M3M2M1.png",hotspots:[],markdownText:"**总览**\n\n> 初步规划路径\n\n**数据流信息**\n\n- PlannerInfo规划信息\n- 加入了路径信息的PlannerInfo\n\n> - 基础关系集合是不需要连接的集合，也即先确定有哪些表参与，PG选择用位图表示\n\n> - 基础关系的访问路径指访问该节点的一个Path元，其中记录着Cost与访问方法（如顺序扫描等）\n\n> - 后续连接依靠这些Path元不断合并\n\n> - 在连接时有三种算法可供选择：动态规划，遗传算法，以及为扩展留出的一个hook\n\n**算法解析**\n\n1. 动态规划\n   ![img](/pictures/level4/dp.png)\n\n   2.  此动态规划逐层建立连接路径\n\n   3. Level表示已经连接的表数\n   4. Bushy Plan会构建起更多样的连接顺序\n   5. 分区表：有些表因为大小等原因切割后存储，成为分区表，故而此处要进行针对其的优化\n   6. 并行优化指通过gather操作等进行性能优化\n2. 遗传算法\n   1. ![img](/pictures/level4/hp.png)\n\n   2.  在此遗传算法中\n\n   3. 基本概念介绍\n      - 基因Gene：一个基因代表一个基础关系，用整数表示\n      - 染色体Chromosome：\n      - ```C\n        typedef struct Chromosome\n        {\n           Gene     *string;  // 由Gene构成的有序表示\n           Cost     worth;    // 染色体的适应度\n        } Chromosome;\n        ```\n\n      - 种群Pool：多个染色体形成，代码中为Pool\n      - ```C\n        typedef struct Pool {     \n            Chromosome *data;     \n            int size;             // 种群大小\n            int string_length;    // 基因（基础关系）数量 \n        } Pool;\n        ```\n   4. 关键步骤解析\n      - 初始化：使用`gimme_pool_size()` 和 `gimme_number_generations()` 计算种群的大小和代数\n      - 交叉：通过指定的算子生成子代的染色体（查询顺序），例如momma [1,2,3,4] , daddy [2,4,1,3] 生成 [1, 2, 4, 3]\n      - 变异：如随机交换基因顺序\n      - 评估子代适应度：通过代价函数计算该染色体（查询顺序）代价\n      - 推送子代：将子代按适应度加入到Pool的合适位置，会挤出Pool中最差者\n      - 停止条件： 达到初始化时计算的代数\n      - 注：交叉与变异均因算子而异\n            ",md:new(P())({html:!1,xhtmlOut:!1,breaks:!1,linkify:!0,typographer:!0,validate:!0})}},computed:{compiledMarkdown(){return this.md.render(this.markdownText)}},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})}};const Sa=(0,r.A)(Ma,[["render",Ta],["__scopeId","data-v-1ad6e9b4"]]);var Ea=Sa;const Aa=e=>((0,l.Qi)("data-v-368ec7d4"),e=e(),(0,l.jt)(),e),wa={class:"common-layout"},Pa=Aa((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Ha={class:"header-content"},Ia=(0,l.eW)("Back"),Xa=Aa((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L1M4",-1))),Ra=Aa((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ba={class:"image-container"},Oa=["src"],Qa={name:"image-map",id:"image-map"},$a=["shape","coords","href","onClick","onMouseover","onMouseout"],Na=Aa((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Wa=(0,l.eW)("Next step"),Da={key:0,class:"rounded-box"},ja=Aa((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),qa=[ja];function Ua(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",wa,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Pa,(0,l.Lk)("div",Ha,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[Ia])),_:1},8,["onClick"]),Xa]),Ra])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ba,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Oa),(0,l.Lk)("map",Qa,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,$a)))),128))])]),Na,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Wa])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Da,qa)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Ka={data(){return{active:0,imageSrc:"/pictures/level1/L1M4.png",hotspots:[{id:"1",shape:"poly",coords:"520,116, 760,116, 770,116, 780,126, 780,236, 770,246, 520,246, 510,236, 510,126",href:"/l2m4m1"},{id:"3",shape:"poly",coords:"520,361, 760,361, 770,361, 780,371, 780,481, 770,491, 520,491, 510,481, 510,371",href:"/l2m4m2"},{id:"2",shape:"poly",coords:"980,116, 1220,116, 1230,116, 1235,126, 1235,236, 1230,246, 980,246, 970,236, 970,126",href:"/l2m4m3"},{id:"4",shape:"poly",coords:"10,133,12,208,15,217,20,218,24,223,199,223,205,219,215,211,213,132,208,128,205,123,21,123,15,124",href:"/l2m2m4"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const za=(0,r.A)(Ka,[["render",Ua],["__scopeId","data-v-368ec7d4"]]);var Ga=za;const Ja=e=>((0,l.Qi)("data-v-af47c5d6"),e=e(),(0,l.jt)(),e),Va={class:"common-layout"},Ya=Ja((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Za={class:"header-content"},es=(0,l.eW)("Back"),ts=Ja((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M1",-1))),ns=Ja((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),os={class:"image-container"},ls=["src"],as={name:"image-map",id:"image-map"},ss=["shape","coords","href","onClick","onMouseover","onMouseout"],is=Ja((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),rs=(0,l.eW)("Next step"),cs={key:0,class:"rounded-box"},ps=Ja((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ds=[ps];function us(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Va,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Ya,(0,l.Lk)("div",Za,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[es])),_:1},8,["onClick"]),ts]),ns])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",os,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,ls),(0,l.Lk)("map",as,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,ss)))),128))])]),is,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[rs])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",cs,ds)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var ms={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M1.png",hotspots:[{id:"1",shape:"poly",coords:"408,15, 594,15, 600,18, 606,18, 606,115 ,601,116, 590,120, 410,120, 400,118, 396,111, 393,106, 393,26, 400,18",href:"/next-level/1"},{id:"2",shape:"poly",coords:"408,715, 594,715, 600,718, 606,718, 606,815 ,601,816, 590,820, 410,820, 400,818, 396,811, 393,806, 393,726, 400,718",href:"/next-level/2"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const hs=(0,r.A)(ms,[["render",us],["__scopeId","data-v-af47c5d6"]]);var gs=hs;const ks=e=>((0,l.Qi)("data-v-3bdcfd45"),e=e(),(0,l.jt)(),e),fs={class:"common-layout"},vs=ks((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),bs={class:"header-content"},ys=(0,l.eW)("Back"),Ls=ks((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M2",-1))),xs=ks((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Fs={class:"image-container"},Cs=["src"],_s={name:"image-map",id:"image-map"},Ts=["shape","coords","href","onClick","onMouseover","onMouseout"],Ms=ks((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),Ss=(0,l.eW)("Next step"),Es={key:0,class:"rounded-box"},As=ks((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),ws=[As];function Ps(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",fs,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[vs,(0,l.Lk)("div",bs,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[ys])),_:1},8,["onClick"]),Ls]),xs])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Fs,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,Cs),(0,l.Lk)("map",_s,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Ts)))),128))])]),Ms,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[Ss])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Es,ws)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Hs={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M2.png",hotspots:[{id:"1",shape:"poly",coords:"356,335,357,413,359,422,362,423,365,427,371,429,549,429,555,428,561,425,564,417,566,415,567,338,565,332,561,326,556,325,371,322,363,328,359,327",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"355,559,356,637,358,646,361,647,364,651,370,653,548,653,554,652,560,649,563,641,565,639,566,562,564,556,560,550,555,549,370,546,362,552,358,551",href:"/l2m2m2"},{id:"3",shape:"poly",coords:"882,429,1117,429,1125,427,1131,420,1131,415,1133,408,1133,336,1129,326,1122,322,881,322,872,326,869,333,866,348,868,413,872,422,876,425",href:"/l2m2m3"},{id:"4",shape:"poly",coords:"881,653,1116,653,1124,651,1130,644,1130,639,1132,632,1132,560,1128,550,1121,546,880,546,871,550,868,557,865,572,867,637,871,646,875,649",href:"/l2m2m4"},{id:"5",shape:"poly",coords:"0,796,1,874,3,883,6,884,9,888,15,890,193,890,199,889,205,886,208,878,210,876,211,799,209,793,205,787,200,786,15,783,7,789,3,788",href:"/next-level/4"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const Is=(0,r.A)(Hs,[["render",Ps],["__scopeId","data-v-3bdcfd45"]]);var Xs=Is;const Rs=e=>((0,l.Qi)("data-v-6d17aa62"),e=e(),(0,l.jt)(),e),Bs={class:"common-layout"},Os=Rs((()=>(0,l.Lk)("div",{style:{"margin-bottom":"20px"}},null,-1))),Qs={class:"header-content"},$s=(0,l.eW)("Back"),Ns=Rs((()=>(0,l.Lk)("span",{class:"text-large font-600 mr-3 title"},"L2M4M3",-1))),Ws=Rs((()=>(0,l.Lk)("div",{style:{"margin-top":"20px"}},null,-1))),Ds={class:"image-container"},js=["src"],qs={name:"image-map",id:"image-map"},Us=["shape","coords","href","onClick","onMouseover","onMouseout"],Ks=Rs((()=>(0,l.Lk)("div",{style:{"margin-top":"30px"}},null,-1))),zs=(0,l.eW)("Next step"),Gs={key:0,class:"rounded-box"},Js=Rs((()=>(0,l.Lk)("div",{class:"box-content"},[(0,l.Lk)("p",null,"Some Text")],-1))),Vs=[Js];function Ys(e,t,n,a,s,i){const r=(0,l.g2)("el-button"),c=(0,l.g2)("el-header"),p=(0,l.g2)("el-step"),d=(0,l.g2)("el-steps"),u=(0,l.g2)("el-main"),m=(0,l.g2)("el-container");return(0,l.uX)(),(0,l.CE)("div",Bs,[(0,l.bF)(m,null,{default:(0,l.k6)((()=>[(0,l.bF)(c,null,{default:(0,l.k6)((()=>[Os,(0,l.Lk)("div",Qs,[(0,l.bF)(r,{type:"info",onClick:i.goBack,class:"back-button"},{default:(0,l.k6)((()=>[$s])),_:1},8,["onClick"]),Ns]),Ws])),_:1}),(0,l.bF)(u,null,{default:(0,l.k6)((()=>[(0,l.Lk)("div",Ds,[(0,l.Lk)("img",{id:"mapAll",ref:"mapAll",src:s.imageSrc,usemap:"#image-map",style:{width:"100%",height:"100%","object-fit":"contain"}},null,8,js),(0,l.Lk)("map",qs,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(s.hotspots,(e=>((0,l.uX)(),(0,l.CE)("area",{key:e.id,shape:e.shape,coords:e.coords,href:e.href,onClick:(0,o.D$)((t=>i.navigateTo(e.href)),["prevent"]),onMouseover:t=>i.highlightHotspot(e.id),onMouseout:t=>i.unhighlightHotspot(e.id)},null,40,Us)))),128))])]),Ks,(0,l.bF)(d,{style:{"max-width":"600px"},active:s.active,"finish-status":"success","align-center":""},{default:(0,l.k6)((()=>[(0,l.bF)(p,{title:"Step 1"}),(0,l.bF)(p,{title:"Step 2"}),(0,l.bF)(p,{title:"Step 3"})])),_:1},8,["active"]),(0,l.bF)(r,{class:"next-button",style:{"margin-top":"12px"},onClick:i.next},{default:(0,l.k6)((()=>[zs])),_:1},8,["onClick"]),s.active>=1?((0,l.uX)(),(0,l.CE)("div",Gs,Vs)):(0,l.Q3)("",!0)])),_:1})])),_:1})])}var Zs={data(){return{active:0,imageSrc:"/pictures/level2/L2M4M3.png",hotspots:[{id:"1",shape:"poly",coords:"356,335,357,413,359,422,362,423,365,427,371,429,549,429,555,428,561,425,564,417,566,415,567,338,565,332,561,326,556,325,371,322,363,328,359,327",href:"/l2m2m1"},{id:"2",shape:"poly",coords:"355,559,356,637,358,646,361,647,364,651,370,653,548,653,554,652,560,649,563,641,565,639,566,562,564,556,560,550,555,549,370,546,362,552,358,551",href:"/l2m2m2"},{id:"3",shape:"poly",coords:"882,429,1117,429,1125,427,1131,420,1131,415,1133,408,1133,336,1129,326,1122,322,881,322,872,326,869,333,866,348,868,413,872,422,876,425",href:"/l2m2m3"},{id:"4",shape:"poly",coords:"881,653,1116,653,1124,651,1130,644,1130,639,1132,632,1132,560,1128,550,1121,546,880,546,871,550,868,557,865,572,867,637,871,646,875,649",href:"/l2m2m4"},{id:"5",shape:"poly",coords:"0,796,1,874,3,883,6,884,9,888,15,890,193,890,199,889,205,886,208,878,210,876,211,799,209,793,205,787,200,786,15,783,7,789,3,788",href:"/next-level/4"}]}},mounted(){A()("#mapAll").mapster({fillColor:"1AC4F9",strokeColor:"FFFFFF",strokeWidth:3,fillOpacity:.6,singleSelect:!0})},methods:{next(){this.active++>2&&(this.active=0)},navigateTo(e){this.$router.push(e)},highlightHotspot(e){const t=A()("#mapAll");t.mapster("highlight",!0,e)},unhighlightHotspot(e){const t=A()("#mapAll");t.mapster("set",!1,e)},goBack(){this.$router.go(-1)}}};const ei=(0,r.A)(Zs,[["render",Ys],["__scopeId","data-v-6d17aa62"]]);var ti=ei;const ni=[{path:"/",component:X},{path:"/l1m1",component:ae},{path:"/l1m2",component:Te},{path:"/l1m5",component:Ue},{path:"/l2m2m1",component:mt},{path:"/l2m2m2",component:It},{path:"/l2m2m3",component:tn},{path:"/l2m2m4",component:Fn},{path:"/l2m3m1",component:Dn},{path:"/l3m2m3m1",component:po},{path:"/l3m2m3m2",component:Po},{path:"/l3m2m3m3",component:Zo},{path:"/l3m3m1m1",component:yl},{path:"/l3m3m1m2",component:Nl},{path:"/l3m3m1m3",component:ra},{path:"/l4m2m3m2m1",component:Ea},{path:"/l1m4",component:Ga},{path:"/l2m4m1",component:gs},{path:"/l2m4m2",component:Xs},{path:"/l2m4m3",component:ti},{path:"/next-level/:id",component:$}],oi=(0,u.aE)({history:(0,u.LA)("/"),routes:ni});var li=oi,ai=n(1109);n(3662);const si=new(P())({html:!0,highlight:(e,t)=>t&&ai.A.getLanguage(t)?`<pre class="hljs"><code>${ai.A.highlight(e,{language:t}).value}</code></pre>`:`<pre class="hljs"><code>${(void 0).utils.escapeHtml(e)}</code></pre>`});var ii=si;const ri=(0,o.Ef)(p);ri.use(d.A),ri.use(li),ri.config.globalProperties.$md=ii,ri.mount("#app")}},t={};function n(o){var l=t[o];if(void 0!==l)return l.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports}n.m=e,function(){var e=[];n.O=function(t,o,l,a){if(!o){var s=1/0;for(p=0;p<e.length;p++){o=e[p][0],l=e[p][1],a=e[p][2];for(var i=!0,r=0;r<o.length;r++)(!1&a||s>=a)&&Object.keys(n.O).every((function(e){return n.O[e](o[r])}))?o.splice(r--,1):(i=!1,a<s&&(s=a));if(i){e.splice(p--,1);var c=l();void 0!==c&&(t=c)}}return t}a=a||0;for(var p=e.length;p>0&&e[p-1][2]>a;p--)e[p]=e[p-1];e[p]=[o,l,a]}}(),function(){n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,{a:t}),t}}(),function(){n.d=function(e,t){for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}}(),function(){n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){var e={524:0};n.O.j=function(t){return 0===e[t]};var t=function(t,o){var l,a,s=o[0],i=o[1],r=o[2],c=0;if(s.some((function(t){return 0!==e[t]}))){for(l in i)n.o(i,l)&&(n.m[l]=i[l]);if(r)var p=r(n)}for(t&&t(o);c<s.length;c++)a=s[c],n.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return n.O(p)},o=self["webpackChunkdata_flow_diagram"]=self["webpackChunkdata_flow_diagram"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))}();var o=n.O(void 0,[504],(function(){return n(8099)}));o=n.O(o)})();
//# sourceMappingURL=app.c6e5304b.js.map